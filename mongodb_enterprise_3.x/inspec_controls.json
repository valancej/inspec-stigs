{"supports":[],"title":"tests from controls/","name":"tests from controls.","controls":[{"title":"MongoDB must protect its audit features from unauthorized access.","desc":"Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data.\n\n    Depending upon the log format and application, system and application log\ntools may provide the only means to manipulate and manage application and\nsystem log data. It is, therefore, imperative that access to audit tools be\ncontrolled and protected from unauthorized access.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe access to audit tools.\n\n    Audit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully\nview and manipulate audit information system activity and records.\n\n    If an attacker were to gain access to audit tools, he could analyze audit\nlogs for system weaknesses or weaknesses in the auditing itself. An attacker\ncould also manipulate logs to hide evidence of malicious activity.","descriptions":{"default":"Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data.\n\n    Depending upon the log format and application, system and application log\ntools may provide the only means to manipulate and manage application and\nsystem log data. It is, therefore, imperative that access to audit tools be\ncontrolled and protected from unauthorized access.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe access to audit tools.\n\n    Audit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully\nview and manipulate audit information system activity and records.\n\n    If an attacker were to gain access to audit tools, he could analyze audit\nlogs for system weaknesses or weaknesses in the auditing itself. An attacker\ncould also manipulate logs to hide evidence of malicious activity.","rationale":"","check":"Verify User ownership, Group ownership, and permissions on the “<MongoDB\nconfiguration file>\":\n\n    (default name and location is '/etc/mongod.conf')\n\n    (The name and location for the MongoDB configuration file will vary\naccording to local circumstances.)\n\n    Using the default name and location the command would be:\n\n    > ls –ald /etc/mongod.conf\n\n    If the User owner is not \"mongod\", this is a finding.\n\n    If the Group owner is not \"mongod\", this is a finding.\n\n    If the filename is more permissive than \"700\", this is a finding.","fix":"Run these commands:\n\n    \"chown mongod <MongoDB configuration file>\"\n    \"chgrp mongod <MongoDB configuration file>\"\n    \"chmod 700 <<MongoDB configuration file>\"\n\n    (The name and location for the MongoDB configuration file will vary\naccording to local circumstances. The default name and location is\n'/etc/mongod.conf'.)\n\n    Using the default name and location the commands would be:\n\n    > chown mongod /etc/mongod.conf\n    > chgrp mongod /etc/mongod.conf\n    > chmod 700 /etc/mongod.conf"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000121-DB-000202","satisfies":["SRG-APP-000121-DB-000202","SRG-APP-000122-DB-000203","SRG-APP-000122-DB-000204"],"gid":"V-81851","rid":"SV-96565r1_rule","stig_id":"MD3X-00-000220","fix_id":"F-88701r1_fix","cci":["CCI-001493","CCI-001494","CCI-001495"],"nist":["AU-9","AU-9","AU-9"]},"code":"control 'V-81851' do\n  title 'MongoDB must protect its audit features from unauthorized access.'\n  desc  \"Protecting audit data also includes identifying and protecting the\ntools used to view and manipulate log data.\n\n    Depending upon the log format and application, system and application log\ntools may provide the only means to manipulate and manage application and\nsystem log data. It is, therefore, imperative that access to audit tools be\ncontrolled and protected from unauthorized access.\n\n    Applications providing tools to interface with audit data will leverage\nuser permissions and roles identifying the user accessing the tools and the\ncorresponding rights the user enjoys in order make access decisions regarding\nthe access to audit tools.\n\n    Audit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully\nview and manipulate audit information system activity and records.\n\n    If an attacker were to gain access to audit tools, he could analyze audit\nlogs for system weaknesses or weaknesses in the auditing itself. An attacker\ncould also manipulate logs to hide evidence of malicious activity.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Verify User ownership, Group ownership, and permissions on the “<MongoDB\nconfiguration file>\\\":\n\n    (default name and location is '/etc/mongod.conf')\n\n    (The name and location for the MongoDB configuration file will vary\naccording to local circumstances.)\n\n    Using the default name and location the command would be:\n\n    > ls –ald /etc/mongod.conf\n\n    If the User owner is not \\\"mongod\\\", this is a finding.\n\n    If the Group owner is not \\\"mongod\\\", this is a finding.\n\n    If the filename is more permissive than \\\"700\\\", this is a finding.\n  \"\n  desc  'fix', \"\n    Run these commands:\n\n    \\\"chown mongod <MongoDB configuration file>\\\"\n    \\\"chgrp mongod <MongoDB configuration file>\\\"\n    \\\"chmod 700 <<MongoDB configuration file>\\\"\n\n    (The name and location for the MongoDB configuration file will vary\naccording to local circumstances. The default name and location is\n'/etc/mongod.conf'.)\n\n    Using the default name and location the commands would be:\n\n    > chown mongod /etc/mongod.conf\n    > chgrp mongod /etc/mongod.conf\n    > chmod 700 /etc/mongod.conf\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000121-DB-000202'\n  tag satisfies: %w(SRG-APP-000121-DB-000202 SRG-APP-000122-DB-000203\nSRG-APP-000122-DB-000204)\n  tag gid: 'V-81851'\n  tag rid: 'SV-96565r1_rule'\n  tag stig_id: 'MD3X-00-000220'\n  tag fix_id: 'F-88701r1_fix'\n  tag cci: %w(CCI-001493 CCI-001494 CCI-001495)\n  tag nist: %w(AU-9 AU-9 AU-9)\n\n  describe file(attribute('mongod_conf')) do\n    it { should_not be_more_permissive_than('0700') }\n    its('owner') { should eq 'mongod' }\n    its('group') { should eq 'mongod' }\n  end\nend\n","source_location":{"ref":"controls/V-81851.rb","line":1},"id":"V-81851"},{"title":"The role(s)/group(s) used to modify database structure (including but\nnot necessarily limited to tables, indexes, storage, etc.) and logic modules\n(stored procedures, functions, triggers, links to software external to MongoDB,\netc.) must be restricted to authorized users.","desc":"If MongoDB were to allow any user to make changes to database\nstructure or logic, then those changes might be implemented without undergoing\nthe appropriate testing and approvals that are part of a robust change\nmanagement process.\n\n    Accordingly, only qualified and authorized individuals must be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.","descriptions":{"default":"If MongoDB were to allow any user to make changes to database\nstructure or logic, then those changes might be implemented without undergoing\nthe appropriate testing and approvals that are part of a robust change\nmanagement process.\n\n    Accordingly, only qualified and authorized individuals must be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.","rationale":"","check":"Run the following command to get the roles from a MongoDB database.\n\n    For each database in MongoDB:\n\n    use <database>\n    db.getRoles(\n    {\n    rolesInfo: 1,\n    showPrivileges:true,\n    showBuiltinRoles: true\n    }\n    )\n\n    Run the following command to the roles assigned to users:\n\n    use admin\n    db.system.users.find()\n\n    Analyze the output and if any roles or users have unauthorized access, this\nis a finding.","fix":"Use the following commands to remove unauthorized access to a MongoDB\ndatabase.\n\n    db.revokePrivilegesFromRole()\n    db. revokeRolesFromUser()\n\n    MongoDB commands for role management can be found here:\n    https://docs.mongodb.com/v3.4/reference/method/js-role-management/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000362","gid":"V-81857","rid":"SV-96571r1_rule","stig_id":"MD3X-00-000270","fix_id":"F-88707r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)"]},"code":"control 'V-81857' do\n  title \"The role(s)/group(s) used to modify database structure (including but\nnot necessarily limited to tables, indexes, storage, etc.) and logic modules\n(stored procedures, functions, triggers, links to software external to MongoDB,\netc.) must be restricted to authorized users.\"\n  desc  \"If MongoDB were to allow any user to make changes to database\nstructure or logic, then those changes might be implemented without undergoing\nthe appropriate testing and approvals that are part of a robust change\nmanagement process.\n\n    Accordingly, only qualified and authorized individuals must be allowed to\nobtain access to information system components for purposes of initiating\nchanges, including upgrades and modifications.\n\n    Unmanaged changes that occur to the database software libraries or\nconfiguration can lead to unauthorized or compromised installations.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Run the following command to get the roles from a MongoDB database.\n\n    For each database in MongoDB:\n\n    use <database>\n    db.getRoles(\n    {\n    rolesInfo: 1,\n    showPrivileges:true,\n    showBuiltinRoles: true\n    }\n    )\n\n    Run the following command to the roles assigned to users:\n\n    use admin\n    db.system.users.find()\n\n    Analyze the output and if any roles or users have unauthorized access, this\nis a finding.\n  \"\n  desc  'fix', \"\n    Use the following commands to remove unauthorized access to a MongoDB\ndatabase.\n\n    db.revokePrivilegesFromRole()\n    db. revokeRolesFromUser()\n\n    MongoDB commands for role management can be found here:\n    https://docs.mongodb.com/v3.4/reference/method/js-role-management/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000133-DB-000362'\n  tag gid: 'V-81857'\n  tag rid: 'SV-96571r1_rule'\n  tag stig_id: 'MD3X-00-000270'\n  tag fix_id: 'F-88707r1_fix'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  if dbnames.empty?\n    describe 'There are no mongo databases, therefore for this control is NA' do\n      skip 'There are no mongo databases, therefore for this control is NA'\n    end\n  end\n\n  unless dbnames.empty?\n    dbnames.each do |dbs|\n      users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n      users.each do |t|\n        loc_colon = t.index(':')\n\n        user = t[loc_colon + 3..-1]\n\n        loc_quote = user.index('\"')\n\n        username = user[0, loc_quote]\n\n        getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"}, {roles: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n\n        getdb_roles.each do |r|\n          remove_role = r.index('[')\n          rr = r[remove_role..-1]\n\n          allowed_role = username\n          describe \"The database role for user: #{username}\" do\n            subject { rr }\n            it { should be_in attribute(\"#{allowed_role}_allowed_role\") }\n          end\n        end\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81857.rb","line":1},"id":"V-81857"},{"title":"Unused database components that are integrated in MongoDB and cannot\nbe uninstalled must be disabled.","desc":"Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    DBMSs must adhere to the principles of least functionality by providing\nonly essential capabilities.\n\n    Unused, unnecessary DBMS components increase the attack vector for MongoDB\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities\nis reduced. Components of the system that are unused and cannot be uninstalled\nmust be disabled. The techniques available for disabling components will vary\nby DBMS product, OS, and the nature of the component and may include DBMS\nconfiguration settings, OS service settings, OS file access security, and DBMS\nuser/role permissions.","descriptions":{"default":"Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    DBMSs must adhere to the principles of least functionality by providing\nonly essential capabilities.\n\n    Unused, unnecessary DBMS components increase the attack vector for MongoDB\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities\nis reduced. Components of the system that are unused and cannot be uninstalled\nmust be disabled. The techniques available for disabling components will vary\nby DBMS product, OS, and the nature of the component and may include DBMS\nconfiguration settings, OS service settings, OS file access security, and DBMS\nuser/role permissions.","rationale":"","check":"In the MongoDB database configuration file (default location:\n/etc/mongod.conf), review the following parameters:\n\n    net:\n    http:\n    enabled: true\n    JSONPEnabled: true\n    RESTInterfaceEnabled: true\n\n    If any of the <booleans> are \"True\" or \"Enabled\", this is a finding.","fix":"In the MongoDB database configuration file (default location:\n/etc/mongod.conf), ensure the following parameters either:\n\n    Does not exist in the file\n    OR\n    Are set to \"false\" as shown below:\n\n    http:\n    enabled: false\n    JSONPEnabled: false\n    RESTInterfaceEnabled: false"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000141-DB-000092","satisfies":["SRG-APP-000141-DB-000092","SRG-APP-000142-DB-000094"],"gid":"V-81861","rid":"SV-96575r1_rule","stig_id":"MD3X-00-000290","fix_id":"F-88711r1_fix","cci":["CCI-000381","CCI-000382"],"nist":["CM-7 a","CM-7 b"],"sdlc_stages":["scm"]},"code":"control 'V-81861' do\n  title \"Unused database components that are integrated in MongoDB and cannot\nbe uninstalled must be disabled.\"\n  desc  \"Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    DBMSs must adhere to the principles of least functionality by providing\nonly essential capabilities.\n\n    Unused, unnecessary DBMS components increase the attack vector for MongoDB\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities\nis reduced. Components of the system that are unused and cannot be uninstalled\nmust be disabled. The techniques available for disabling components will vary\nby DBMS product, OS, and the nature of the component and may include DBMS\nconfiguration settings, OS service settings, OS file access security, and DBMS\nuser/role permissions.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf), review the following parameters:\n\n    net:\n    http:\n    enabled: true\n    JSONPEnabled: true\n    RESTInterfaceEnabled: true\n\n    If any of the <booleans> are \\\"True\\\" or \\\"Enabled\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf), ensure the following parameters either:\n\n    Does not exist in the file\n    OR\n    Are set to \\\"false\\\" as shown below:\n\n    http:\n    enabled: false\n    JSONPEnabled: false\n    RESTInterfaceEnabled: false\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000141-DB-000092'\n  tag satisfies: %w(SRG-APP-000141-DB-000092 SRG-APP-000142-DB-000094)\n  tag gid: 'V-81861'\n  tag rid: 'SV-96575r1_rule'\n  tag stig_id: 'MD3X-00-000290'\n  tag fix_id: 'F-88711r1_fix'\n  tag cci: %w(CCI-000381 CCI-000382)\n  tag nist: ['CM-7 a', 'CM-7 b']\n  tag sdlc_stages: ['scm']\n\n  mongo_conf_file = attribute('mongod_conf')\n  describe.one do\n    describe yaml(mongo_conf_file.to_s) do\n      its(%w(net http enabled)) { should cmp 'false' }\n    end\n    describe yaml(mongo_conf_file.to_s) do\n      its(%w(net http enabled)) { should be_nil }\n    end\n  end\n\n  describe.one do\n    describe yaml(mongo_conf_file.to_s) do\n      its(%w(net http JSONPEnabled)) { should cmp 'false' }\n    end\n    describe yaml(mongo_conf_file.to_s) do\n      its(%w(net http JSONPEnabled)) { should be_nil }\n    end\n  end\n\n  describe.one do\n    describe yaml(mongo_conf_file.to_s) do\n      its(%w(net http RESTInterfaceEnabled)) { should cmp 'false' }\n    end\n    describe yaml(mongo_conf_file.to_s) do\n      its(%w(net http RESTInterfaceEnabled)) { should be_nil }\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81861.rb","line":1},"id":"V-81861"},{"title":"Database contents must be protected from unauthorized and unintended\ninformation transfer by enforcement of a data-transfer policy.","desc":"Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources.\n\n    Data used for the development and testing of applications often involves\ncopying data from production. It is important that specific procedures exist\nfor this process, to include the conditions under which such transfer may take\nplace, where the copies may reside, and the rules for ensuring sensitive data\nare not exposed.\n\n    Copies of sensitive data must not be misplaced or left in a temporary\nlocation without the proper controls.","descriptions":{"default":"Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources.\n\n    Data used for the development and testing of applications often involves\ncopying data from production. It is important that specific procedures exist\nfor this process, to include the conditions under which such transfer may take\nplace, where the copies may reside, and the rules for ensuring sensitive data\nare not exposed.\n\n    Copies of sensitive data must not be misplaced or left in a temporary\nlocation without the proper controls.","rationale":"","check":"Review the procedures for the refreshing of development/test data from\nproduction.\n\n    Review any scripts or code that exists for the movement of production data\nto development/test systems, or to any other location or for any other purpose.\n\n    Verify that copies of production data are not left in unprotected\nlocations.\n\n    If the code that exists for data movement does not comply with the\norganization-defined data transfer policy and/or fails to remove any copies of\nproduction data from unprotected locations, this is a finding.","fix":"Modify any code used for moving data from production to\ndevelopment/test systems to comply with the organization-defined data transfer\npolicy, and to ensure copies of production data are not left in unsecured\nlocations."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000243-DB-000128","gid":"V-81885","rid":"SV-96599r1_rule","stig_id":"MD3X-00-000460","fix_id":"F-88735r1_fix","cci":["CCI-001090"],"nist":["SC-4"]},"code":"control 'V-81885' do\n  title \"Database contents must be protected from unauthorized and unintended\ninformation transfer by enforcement of a data-transfer policy.\"\n  desc  \"Applications, including DBMSs, must prevent unauthorized and\nunintended information transfer via shared system resources.\n\n    Data used for the development and testing of applications often involves\ncopying data from production. It is important that specific procedures exist\nfor this process, to include the conditions under which such transfer may take\nplace, where the copies may reside, and the rules for ensuring sensitive data\nare not exposed.\n\n    Copies of sensitive data must not be misplaced or left in a temporary\nlocation without the proper controls.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the procedures for the refreshing of development/test data from\nproduction.\n\n    Review any scripts or code that exists for the movement of production data\nto development/test systems, or to any other location or for any other purpose.\n\n    Verify that copies of production data are not left in unprotected\nlocations.\n\n    If the code that exists for data movement does not comply with the\norganization-defined data transfer policy and/or fails to remove any copies of\nproduction data from unprotected locations, this is a finding.\n  \"\n  desc 'fix', \"Modify any code used for moving data from production to\ndevelopment/test systems to comply with the organization-defined data transfer\npolicy, and to ensure copies of production data are not left in unsecured\nlocations.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000243-DB-000128'\n  tag gid: 'V-81885'\n  tag rid: 'SV-96599r1_rule'\n  tag stig_id: 'MD3X-00-000460'\n  tag fix_id: 'F-88735r1_fix'\n  tag cci: ['CCI-001090']\n  tag nist: ['SC-4']\n\n  describe 'A manual review is required to ensure that database contents are protected from unauthorized and unintended\n  information transfer by enforcement of a data-transfer policy.' do\n    skip 'A manual review is required to ensure that database contents are protected from unauthorized and unintended\n    information transfer by enforcement of a data-transfer policy.'\n  end\nend\n","source_location":{"ref":"controls/V-81885.rb","line":1},"id":"V-81885"},{"title":"MongoDB must associate organization-defined types of security labels\nhaving organization-defined security label values with information in storage.","desc":"Without the association of security labels to information, there is no\nbasis for MongoDB to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling, or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of MongoDB\nproduct, a third-party product, or custom application code.","descriptions":{"default":"Without the association of security labels to information, there is no\nbasis for MongoDB to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling, or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of MongoDB\nproduct, a third-party product, or custom application code.","rationale":"","check":"MongoDB supports role-based access control at the collection level. If\nenabled, the database process should be started with\n\"security.authorization:enabled\" in the config file or with \"--auth\" in the\ncommand line.\n\n    For documents that have been labeled (e.g., {\"tag\" : \"classified\"}),\nread-only views can be created and secured via access privileges such that a\nuser can only view those documents that have a specific tag or tags (e.g., user\nx can only view records that are labeled with the tag of classified). Existing\nviews can be listed using the db.getCollectionInfos() command for the selected\ndatabase in mongo shell.\n\n    If a view is not present for the collection requiring security labeling,\nthis is a finding.\n\n    MongoDB supports field-level redaction that allows the application to\nindicate to the database whether or not certain fields should be returned based\non values in the field labels.\n\n    If desired and aggregation queries in the application code are not using\nthe $redact stage with appropriate logic, this is a finding.","fix":"Follow the documentation page to setup\nRBAC:https://docs.mongodb.com/manual/core/authorization/.\n\n    For the required collections, create specific read-only views that allow\naccess to only a subset of the data in a collection as documented here:\nhttps://docs.mongodb.com/manual/core/views/. Permissions on the view are\nspecified separately from the permissions on the underlying collection.\n\n    Use the \"$redact\" operator to restrict the contents of the documents\nbased on information stored in the documents themselves as documented here:\nhttps://docs.mongodb.com/master/reference/operator/aggregation/redact/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000311-DB-000308","satisfies":["SRG-APP-000311-DB-000308","SRG-APP-000313-DB-000309","SRG-APP-000313-DB-000310"],"gid":"V-81897","rid":"SV-96611r1_rule","stig_id":"MD3X-00-000540","fix_id":"F-88747r1_fix","cci":["CCI-002262","CCI-002263","CCI-002264"],"nist":["AC-16 a","AC-16 a","AC-16 a"]},"code":"control 'V-81897' do\n  title \"MongoDB must associate organization-defined types of security labels\nhaving organization-defined security label values with information in storage.\"\n  desc  \"Without the association of security labels to information, there is no\nbasis for MongoDB to make security-related access-control decisions.\n\n    Security labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\n    These labels are typically associated with internal data structures (e.g.,\ntables, rows) within the database and are used to enable the implementation of\naccess control and flow control policies, reflect special dissemination,\nhandling, or distribution instructions, or support other aspects of the\ninformation security policy.\n\n    One example includes marking data as classified or FOUO. These security\nlabels may be assigned manually or during data processing, but, either way, it\nis imperative these assignments are maintained while the data is in storage. If\nthe security labels are lost when the data is stored, there is the risk of a\ndata compromise.\n\n    The mechanism used to support security labeling may be a feature of MongoDB\nproduct, a third-party product, or custom application code.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    MongoDB supports role-based access control at the collection level. If\nenabled, the database process should be started with\n\\\"security.authorization:enabled\\\" in the config file or with \\\"--auth\\\" in the\ncommand line.\n\n    For documents that have been labeled (e.g., {\\\"tag\\\" : \\\"classified\\\"}),\nread-only views can be created and secured via access privileges such that a\nuser can only view those documents that have a specific tag or tags (e.g., user\nx can only view records that are labeled with the tag of classified). Existing\nviews can be listed using the db.getCollectionInfos() command for the selected\ndatabase in mongo shell.\n\n    If a view is not present for the collection requiring security labeling,\nthis is a finding.\n\n    MongoDB supports field-level redaction that allows the application to\nindicate to the database whether or not certain fields should be returned based\non values in the field labels.\n\n    If desired and aggregation queries in the application code are not using\nthe $redact stage with appropriate logic, this is a finding.\n  \"\n  desc 'fix', \"\n    Follow the documentation page to setup\nRBAC:https://docs.mongodb.com/manual/core/authorization/.\n\n    For the required collections, create specific read-only views that allow\naccess to only a subset of the data in a collection as documented here:\nhttps://docs.mongodb.com/manual/core/views/. Permissions on the view are\nspecified separately from the permissions on the underlying collection.\n\n    Use the \\\"$redact\\\" operator to restrict the contents of the documents\nbased on information stored in the documents themselves as documented here:\nhttps://docs.mongodb.com/master/reference/operator/aggregation/redact/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000311-DB-000308'\n  tag satisfies: %w(SRG-APP-000311-DB-000308 SRG-APP-000313-DB-000309\nSRG-APP-000313-DB-000310)\n  tag gid: 'V-81897'\n  tag rid: 'SV-96611r1_rule'\n  tag stig_id: 'MD3X-00-000540'\n  tag fix_id: 'F-88747r1_fix'\n  tag cci: %w(CCI-002262 CCI-002263 CCI-002264)\n  tag nist: ['AC-16 a', 'AC-16 a', 'AC-16 a']\n\n  describe 'A manual review is required to ensure MongoDB associates organization-defined types of security labels\n  having organization-defined security label values with information in storage.' do\n    skip 'A manual review is required to ensure MongoDB associates organization-defined types of security labels\n  having organization-defined security label values with information in storage.'\n  end\nend\n","source_location":{"ref":"controls/V-81897.rb","line":1},"id":"V-81897"},{"title":"MongoDB must provide audit record generation for DoD-defined auditable\nevents within all DBMS/database components.","desc":"MongoDB must provide audit record generation capability for\nDoD-defined auditable events within all DBMS/database components.","descriptions":{"default":"MongoDB must provide audit record generation capability for\nDoD-defined auditable events within all DBMS/database components.","rationale":"","check":"Check the MongoDB configuration file (default location: '/etc/mongod.conf)'\nfor a key named 'auditLog:'.\n\n    Example shown below:\n\n    auditLog:\n    destination: syslog\n\n    If an \"auditLog:\" key is not present, this is a finding indicating that\nauditing is not turned on.\n\n    If the \"auditLog:\" key is present and contains a subkey of \"filter:\"\nwith an associated filter value string, this is a finding.\n\n    The site auditing policy must be reviewed to determine if the \"filter:\"\nbeing applied meets the site auditing requirements. If not, then the filter\nbeing applied will need to be modified to comply.\n\n    Example show below:\n\n    auditLog:\n    destination: syslog\n    filter: '{ atype: { $in: [ \"createCollection\", \"dropCollection\" ] } }'","fix":"If the \"auditLog\" setting was not present in the MongoDB configuration\nfile (default location: '/etc/mongod.conf)' edit this file and add a configured\n\"auditLog\" setting:\n\n    auditLog:\n    destination: syslog\n\n    Stop/start (restart) the mongod or mongos instance using this configuration.\n\n    If the \"auditLog\" setting was present and contained a \"filter:\"\nparameter, ensure the \"filter:\" expression does not prevent the auditing of\nevents that should be audited or remove the \"filter:\" parameter to enable\nauditing all events."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000089-DB-000064","satisfies":["SRG-APP-000089-DB-000064","SRG-APP-000080-DB-000063","SRG-APP-000090-DB-000065","SRG-APP-000091-DB-000066","SRG-APP-000091-DB-000325","SRG-APP-000092-DB-000208","SRG-APP-000093-DB-000052","SRG-APP-000095-DB-000039","SRG-APP-000096-DB-000040","SRG-APP-000097-DB-000041","SRG-APP-000098-DB-000042","SRG-APP-000099-DB-000043","SRG-APP-000100-DB-000201","SRG-APP-000101-DB-000044","SRG-APP-000109-DB-000049","SRG-APP-000356-DB-000315","SRG-APP-000360-DB-000320","SRG-APP-000381-DB-000361","SRG-APP-000492-DB-000332","SRG-APP-000492-DB-000333","SRG-APP-000494-DB-000344","SRG-APP-000494-DB-000345","SRG-APP-000495-DB-000326","SRG-APP-000495-DB-000327","SRG-APP-000495-DB-000328","SRG-APP-000495-DB-000329","SRG-APP-000496-DB-000334","SRG-APP-000496-DB-000335","SRG-APP-000498-DB-000346","SRG-APP-000498-DB-000347","SRG-APP-000499-DB-000330","SRG-APP-000499-DB-000331","SRG-APP-000501-DB-000336","SRG-APP-000501-DB-000337","SRG-APP-000502-DB-000348","SRG-APP-000502-DB-000349","SRG-APP-000503-DB-000350","SRG-APP-000503-DB-000351","SRG-APP-000504-DB-000354","SRG-APP-000504-DB-000355","SRG-APP-000505-DB-000352","SRG-APP-000506-DB-000353","SRG-APP-000507-DB-000356","SRG-APP-000507-DB-000357","SRG-APP-000508-DB-000358","SRG-APP-000515-DB-000318"],"gid":"V-81847","rid":"SV-96561r1_rule","stig_id":"MD3X-00-000040","fix_id":"F-88697r1_fix","cci":["CCI-000130","CCI-000131","CCI-000132","CCI-000133","CCI-000134","CCI-000135","CCI-000140","CCI-000166","CCI-000171","CCI-000172","CCI-001462","CCI-001464","CCI-001487","CCI-001814","CCI-001844","CCI-001851","CCI-001858"],"nist":["AU-3","AU-3","AU-3","AU-3","AU-3","AU-3 (1)","AU-5 b","AU-10","AU-12 b","AU-12 c","AU-14 (2)","AU-14 (1)","AU-3","CM-5 (1)","AU-3 (2)","AU-4 (1)","AU-5 (2)"],"sdlc_stages":["scm"]},"code":"control 'V-81847' do\n  title \"MongoDB must provide audit record generation for DoD-defined auditable\nevents within all DBMS/database components.\"\n  desc  \"MongoDB must provide audit record generation capability for\nDoD-defined auditable events within all DBMS/database components.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Check the MongoDB configuration file (default location: '/etc/mongod.conf)'\nfor a key named 'auditLog:'.\n\n    Example shown below:\n\n    auditLog:\n    destination: syslog\n\n    If an \\\"auditLog:\\\" key is not present, this is a finding indicating that\nauditing is not turned on.\n\n    If the \\\"auditLog:\\\" key is present and contains a subkey of \\\"filter:\\\"\nwith an associated filter value string, this is a finding.\n\n    The site auditing policy must be reviewed to determine if the \\\"filter:\\\"\nbeing applied meets the site auditing requirements. If not, then the filter\nbeing applied will need to be modified to comply.\n\n    Example show below:\n\n    auditLog:\n    destination: syslog\n    filter: '{ atype: { $in: [ \\\"createCollection\\\", \\\"dropCollection\\\" ] } }'\n  \"\n  desc 'fix', \"\n    If the \\\"auditLog\\\" setting was not present in the MongoDB configuration\nfile (default location: '/etc/mongod.conf)' edit this file and add a configured\n\\\"auditLog\\\" setting:\n\n    auditLog:\n    destination: syslog\n\n    Stop/start (restart) the mongod or mongos instance using this configuration.\n\n    If the \\\"auditLog\\\" setting was present and contained a \\\"filter:\\\"\nparameter, ensure the \\\"filter:\\\" expression does not prevent the auditing of\nevents that should be audited or remove the \\\"filter:\\\" parameter to enable\nauditing all events.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000089-DB-000064'\n  tag satisfies: %w(SRG-APP-000089-DB-000064 SRG-APP-000080-DB-000063\nSRG-APP-000090-DB-000065 SRG-APP-000091-DB-000066\nSRG-APP-000091-DB-000325 SRG-APP-000092-DB-000208\nSRG-APP-000093-DB-000052 SRG-APP-000095-DB-000039\nSRG-APP-000096-DB-000040 SRG-APP-000097-DB-000041\nSRG-APP-000098-DB-000042 SRG-APP-000099-DB-000043\nSRG-APP-000100-DB-000201 SRG-APP-000101-DB-000044\nSRG-APP-000109-DB-000049 SRG-APP-000356-DB-000315\nSRG-APP-000360-DB-000320 SRG-APP-000381-DB-000361\nSRG-APP-000492-DB-000332 SRG-APP-000492-DB-000333\nSRG-APP-000494-DB-000344 SRG-APP-000494-DB-000345\nSRG-APP-000495-DB-000326 SRG-APP-000495-DB-000327\nSRG-APP-000495-DB-000328 SRG-APP-000495-DB-000329\nSRG-APP-000496-DB-000334 SRG-APP-000496-DB-000335\nSRG-APP-000498-DB-000346 SRG-APP-000498-DB-000347\nSRG-APP-000499-DB-000330 SRG-APP-000499-DB-000331\nSRG-APP-000501-DB-000336 SRG-APP-000501-DB-000337\nSRG-APP-000502-DB-000348 SRG-APP-000502-DB-000349\nSRG-APP-000503-DB-000350 SRG-APP-000503-DB-000351\nSRG-APP-000504-DB-000354 SRG-APP-000504-DB-000355\nSRG-APP-000505-DB-000352 SRG-APP-000506-DB-000353\nSRG-APP-000507-DB-000356 SRG-APP-000507-DB-000357\nSRG-APP-000508-DB-000358 SRG-APP-000515-DB-000318)\n  tag gid: 'V-81847'\n  tag rid: 'SV-96561r1_rule'\n  tag stig_id: 'MD3X-00-000040'\n  tag fix_id: 'F-88697r1_fix'\n  tag cci: %w(CCI-000130 CCI-000131 CCI-000132 CCI-000133\nCCI-000134 CCI-000135 CCI-000140 CCI-000166 CCI-000171\nCCI-000172 CCI-001462 CCI-001464 CCI-001487 CCI-001814\nCCI-001844 CCI-001851 CCI-001858)\n  tag nist: ['AU-3', 'AU-3', 'AU-3', 'AU-3', 'AU-3', 'AU-3 (1)', 'AU-5 b',\n'AU-10', 'AU-12 b', 'AU-12 c', 'AU-14 (2)', 'AU-14 (1)', 'AU-3', 'CM-5 (1)',\n'AU-3 (2)', 'AU-4 (1)', 'AU-5 (2)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog destination)) { should cmp 'syslog' }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog filter)) { should be_nil }\n  end\nend\n","source_location":{"ref":"controls/V-81847.rb","line":1},"id":"V-81847"},{"title":"The audit information produced by MongoDB must be protected from\nunauthorized read access.","desc":"If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is difficult, if not impossible, to achieve. In addition, access to\naudit records provides information an attacker could potentially use to his or\nher advantage.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from any and all unauthorized\naccess. This includes read, write, copy, etc.\n\n    This requirement can be achieved through multiple methods which will depend\nupon system architecture and design. Some commonly employed methods include\nensuring log files enjoy the proper file system permissions utilizing file\nsystem protections and limiting log data location.\n\n    Additionally, applications with user interfaces to audit records should not\nallow for the unfettered manipulation of or access to those records via the\napplication. If the application provides access to the audit data, the\napplication becomes accountable for ensuring that audit information is\nprotected from unauthorized access.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.","descriptions":{"default":"If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is difficult, if not impossible, to achieve. In addition, access to\naudit records provides information an attacker could potentially use to his or\nher advantage.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from any and all unauthorized\naccess. This includes read, write, copy, etc.\n\n    This requirement can be achieved through multiple methods which will depend\nupon system architecture and design. Some commonly employed methods include\nensuring log files enjoy the proper file system permissions utilizing file\nsystem protections and limiting log data location.\n\n    Additionally, applications with user interfaces to audit records should not\nallow for the unfettered manipulation of or access to those records via the\napplication. If the application provides access to the audit data, the\napplication becomes accountable for ensuring that audit information is\nprotected from unauthorized access.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.","rationale":"","check":"Verify User ownership, Group ownership, and permissions on the \"<MongoDB\nauditLog directory>\":\n\n    > ls –ald <MongoDB auditLog data directory>\n\n    If the User owner is not \"mongod\", this is a finding.\n\n    If the Group owner is not \"mongod\", this is a finding.\n\n    If the directory is more permissive than \"700\", this is a finding.\n\n    (The path for the MongoDB auditLog directory will vary according to local\ncircumstances. The auditLog directory will be found in the MongoDB\nconfiguration file whose default location is '/etc/mongod.conf'.)\n\n    To find the auditLog directory name, view and search for the entry in the\nMongoDB configuration file for the auditLog.path:\n\n    Example:\n\n    auditLog:\n    destination: file\n    format: BSON\n    path: /var/lib/mongo/auditLog.bson\n\n    Given the example above, to find the auditLog directory name run the\nfollowing command:\n\n    > dirname /var/lib/mongo/auditLog.bson\n    the output will be the \"<MongoDB auditLog directory>\"\n\n    /var/lib/mongo","fix":"Run these commands:\n\n    \"chown mongod <MongoDB auditLog directory>\"\n    \"chgrp mongod <MongoDB auditLog directory>\"\n    \"chmod 700 <<MongoDB auditLog directory>\"\n\n    (The path for the MongoDB auditLog directory will vary according to local\ncircumstances. The auditLog directory will be found in the MongoDB\nconfiguration file whose default location is '/etc/mongod.conf'.)\n\n    To find the auditLog directory name, view and search for the entry in the\nMongoDB configuration file for the auditLog.path:\n\n    Example:\n\n    auditLog:\n    destination: file\n    format: BSON\n    path: /var/lib/mongo/auditLog.bson\n\n    Given the example above, to find the auditLog directory name run the\nfollowing command:\n\n    > dirname /var/lib/mongo/auditLog.bson\n    the output will be the \"<MongoDB auditLog directory>\"\n\n    /var/lib/mongo"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000118-DB-000059","satisfies":["SRG-APP-000118-DB-000059","SRG-APP-000119-DB-000060","SRG-APP-000120-DB-000061"],"gid":"V-81849","rid":"SV-96563r1_rule","stig_id":"MD3X-00-000190","fix_id":"F-88699r1_fix","cci":["CCI-000162","CCI-000163","CCI-000164"],"nist":["AU-9","AU-9","AU-9"]},"code":"control 'V-81849' do\n  title \"The audit information produced by MongoDB must be protected from\nunauthorized read access.\"\n  desc  \"If audit data were to become compromised, then competent forensic\nanalysis and discovery of the true source of potentially malicious system\nactivity is difficult, if not impossible, to achieve. In addition, access to\naudit records provides information an attacker could potentially use to his or\nher advantage.\n\n    To ensure the veracity of audit data, the information system and/or the\napplication must protect audit information from any and all unauthorized\naccess. This includes read, write, copy, etc.\n\n    This requirement can be achieved through multiple methods which will depend\nupon system architecture and design. Some commonly employed methods include\nensuring log files enjoy the proper file system permissions utilizing file\nsystem protections and limiting log data location.\n\n    Additionally, applications with user interfaces to audit records should not\nallow for the unfettered manipulation of or access to those records via the\napplication. If the application provides access to the audit data, the\napplication becomes accountable for ensuring that audit information is\nprotected from unauthorized access.\n\n    Audit information includes all information (e.g., audit records, audit\nsettings, and audit reports) needed to successfully audit information system\nactivity.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Verify User ownership, Group ownership, and permissions on the \\\"<MongoDB\nauditLog directory>\\\":\n\n    > ls –ald <MongoDB auditLog data directory>\n\n    If the User owner is not \\\"mongod\\\", this is a finding.\n\n    If the Group owner is not \\\"mongod\\\", this is a finding.\n\n    If the directory is more permissive than \\\"700\\\", this is a finding.\n\n    (The path for the MongoDB auditLog directory will vary according to local\ncircumstances. The auditLog directory will be found in the MongoDB\nconfiguration file whose default location is '/etc/mongod.conf'.)\n\n    To find the auditLog directory name, view and search for the entry in the\nMongoDB configuration file for the auditLog.path:\n\n    Example:\n\n    auditLog:\n    destination: file\n    format: BSON\n    path: /var/lib/mongo/auditLog.bson\n\n    Given the example above, to find the auditLog directory name run the\nfollowing command:\n\n    > dirname /var/lib/mongo/auditLog.bson\n    the output will be the \\\"<MongoDB auditLog directory>\\\"\n\n    /var/lib/mongo\n  \"\n  desc  'fix', \"\n    Run these commands:\n\n    \\\"chown mongod <MongoDB auditLog directory>\\\"\n    \\\"chgrp mongod <MongoDB auditLog directory>\\\"\n    \\\"chmod 700 <<MongoDB auditLog directory>\\\"\n\n    (The path for the MongoDB auditLog directory will vary according to local\ncircumstances. The auditLog directory will be found in the MongoDB\nconfiguration file whose default location is '/etc/mongod.conf'.)\n\n    To find the auditLog directory name, view and search for the entry in the\nMongoDB configuration file for the auditLog.path:\n\n    Example:\n\n    auditLog:\n    destination: file\n    format: BSON\n    path: /var/lib/mongo/auditLog.bson\n\n    Given the example above, to find the auditLog directory name run the\nfollowing command:\n\n    > dirname /var/lib/mongo/auditLog.bson\n    the output will be the \\\"<MongoDB auditLog directory>\\\"\n\n    /var/lib/mongo\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000118-DB-000059'\n  tag satisfies: %w(SRG-APP-000118-DB-000059 SRG-APP-000119-DB-000060\nSRG-APP-000120-DB-000061)\n  tag gid: 'V-81849'\n  tag rid: 'SV-96563r1_rule'\n  tag stig_id: 'MD3X-00-000190'\n  tag fix_id: 'F-88699r1_fix'\n  tag cci: %w(CCI-000162 CCI-000163 CCI-000164)\n  tag nist: %w(AU-9 AU-9 AU-9)\n\n  mongodb_auditlog_dir = command('dirname /var/lib/mongo/auditLog.bson').stdout.strip\n  describe file(mongodb_auditlog_dir) do\n    it { should_not be_more_permissive_than('0700') }\n    its('owner') { should eq 'mongod' }\n    its('group') { should eq 'mongod' }\n  end\nend\n","source_location":{"ref":"controls/V-81849.rb","line":1},"id":"V-81849"},{"title":"MongoDB must maintain the authenticity of communications sessions by\nguarding against man-in-the-middle attacks that guess at Session ID values.","desc":"One class of man-in-the-middle, or session hijacking, attack involves\nthe adversary guessing at valid session identifiers based on patterns in\nidentifiers already known.\n\n    The preferred technique for thwarting guesses at Session IDs is the\ngeneration of unique session identifiers using a FIPS 140-2 approved random\nnumber generator.\n\n    However, it is recognized that available DBMS products do not all implement\nthe preferred technique yet may have other protections against session\nhijacking. Therefore, other techniques are acceptable, provided they are\ndemonstrated to be effective.","descriptions":{"default":"One class of man-in-the-middle, or session hijacking, attack involves\nthe adversary guessing at valid session identifiers based on patterns in\nidentifiers already known.\n\n    The preferred technique for thwarting guesses at Session IDs is the\ngeneration of unique session identifiers using a FIPS 140-2 approved random\nnumber generator.\n\n    However, it is recognized that available DBMS products do not all implement\nthe preferred technique yet may have other protections against session\nhijacking. Therefore, other techniques are acceptable, provided they are\ndemonstrated to be effective.","rationale":"","check":"Check the MongoDB configuration file (default location: /etc/mongod.conf).\n\nThe following should be set:\n\nnet:\nssl:\nmode: requireSSL\n\nIf this is not found in the MongoDB configuration file, this is a finding.","fix":"Follow the documentation guide at\nhttps://docs.mongodb.com/v3.4/tutorial/configure-ssl/.\n\n    Stop/start (restart) and mongod or mongos using the MongoDB configuration\nfile."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000224-DB-000384","gid":"V-81879","rid":"SV-96593r1_rule","stig_id":"MD3X-00-000410","fix_id":"F-88729r1_fix","cci":["CCI-001188"],"nist":["SC-23 (3)"],"sdlc_stages":["scm"]},"code":"control 'V-81879' do\n  title \"MongoDB must maintain the authenticity of communications sessions by\nguarding against man-in-the-middle attacks that guess at Session ID values.\"\n  desc  \"One class of man-in-the-middle, or session hijacking, attack involves\nthe adversary guessing at valid session identifiers based on patterns in\nidentifiers already known.\n\n    The preferred technique for thwarting guesses at Session IDs is the\ngeneration of unique session identifiers using a FIPS 140-2 approved random\nnumber generator.\n\n    However, it is recognized that available DBMS products do not all implement\nthe preferred technique yet may have other protections against session\nhijacking. Therefore, other techniques are acceptable, provided they are\ndemonstrated to be effective.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Check the MongoDB configuration file (default location: /etc/mongod.conf).\n\n    The following should be set:\n\n    net:\n    ssl:\n    mode: requireSSL\n\n    If this is not found in the MongoDB configuration file, this is a finding.\n  \"\n  desc 'fix', \"\n    Follow the documentation guide at\nhttps://docs.mongodb.com/v3.4/tutorial/configure-ssl/.\n\n    Stop/start (restart) and mongod or mongos using the MongoDB configuration\nfile.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000224-DB-000384'\n  tag gid: 'V-81879'\n  tag rid: 'SV-96593r1_rule'\n  tag stig_id: 'MD3X-00-000410'\n  tag fix_id: 'F-88729r1_fix'\n  tag cci: ['CCI-001188']\n  tag nist: ['SC-23 (3)']\n  tag sdlc_stages: ['scm']\n  \n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl mode)) { should cmp 'requireSSL' }\n  end\nend\n","source_location":{"ref":"controls/V-81879.rb","line":1},"id":"V-81879"},{"title":"When invalid inputs are received, MongoDB must behave in a predictable\nand documented manner that reflects organizational and system objectives.","desc":"A common vulnerability is unplanned behavior when invalid inputs are\nreceived. This requirement guards against adverse or unintended system behavior\ncaused by invalid inputs, where information system responses to the invalid\ninput may be disruptive or cause the system to fail into an unsafe state.\n\n    The behavior will be derived from the organizational and system\nrequirements and includes, but is not limited to, notification of the\nappropriate personnel, creating an audit record, and rejecting invalid input.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","descriptions":{"default":"A common vulnerability is unplanned behavior when invalid inputs are\nreceived. This requirement guards against adverse or unintended system behavior\ncaused by invalid inputs, where information system responses to the invalid\ninput may be disruptive or cause the system to fail into an unsafe state.\n\n    The behavior will be derived from the organizational and system\nrequirements and includes, but is not limited to, notification of the\nappropriate personnel, creating an audit record, and rejecting invalid input.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","rationale":"","check":"As a user with the \"dbAdminAnyDatabase\" role, execute the following on\nthe database of interest:\n\n    use myDB\n    db.getCollectionInfos()\n\n    Where \"myDB\" is the name of the database on which validator rules are to\nbe inspected. This returns an array of documents containing all collections\ninformation within myDB. For each collection's information received.\n\n    If the \"options\" sub-document within each does not contain a\n\"validator\" sub-document, this is a finding.","fix":"Document validation can be added at the time of creation of a\ncollection. Existing collections can also be modified with document validation\nrules. Use the \"validator\" option to create or update a collection with the\ndesired validation rules."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000447-DB-000393","gid":"V-81925","rid":"SV-96639r1_rule","stig_id":"MD3X-00-000780","fix_id":"F-88775r1_fix","cci":["CCI-002754"],"nist":["SI-10 (3)"]},"code":"control 'V-81925' do\n  title \"When invalid inputs are received, MongoDB must behave in a predictable\nand documented manner that reflects organizational and system objectives.\"\n  desc  \"A common vulnerability is unplanned behavior when invalid inputs are\nreceived. This requirement guards against adverse or unintended system behavior\ncaused by invalid inputs, where information system responses to the invalid\ninput may be disruptive or cause the system to fail into an unsafe state.\n\n    The behavior will be derived from the organizational and system\nrequirements and includes, but is not limited to, notification of the\nappropriate personnel, creating an audit record, and rejecting invalid input.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    As a user with the \\\"dbAdminAnyDatabase\\\" role, execute the following on\nthe database of interest:\n\n    use myDB\n    db.getCollectionInfos()\n\n    Where \\\"myDB\\\" is the name of the database on which validator rules are to\nbe inspected. This returns an array of documents containing all collections\ninformation within myDB. For each collection's information received.\n\n    If the \\\"options\\\" sub-document within each does not contain a\n\\\"validator\\\" sub-document, this is a finding.\n  \"\n  desc 'fix', \"Document validation can be added at the time of creation of a\ncollection. Existing collections can also be modified with document validation\nrules. Use the \\\"validator\\\" option to create or update a collection with the\ndesired validation rules.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000447-DB-000393'\n  tag gid: 'V-81925'\n  tag rid: 'SV-96639r1_rule'\n  tag stig_id: 'MD3X-00-000780'\n  tag fix_id: 'F-88775r1_fix'\n  tag cci: ['CCI-002754']\n  tag nist: ['SI-10 (3)']\n\n  describe 'A manual review is required to ensure when invalid inputs are received, MongoDB behaves in a predictable\n  and documented manner that reflects organizational and system objectives' do\n    skip 'A manual review is required to ensure when invalid inputs are received, MongoDB behaves in a predictable\n    and documented manner that reflects organizational and system objectives'\n  end\nend\n","source_location":{"ref":"controls/V-81925.rb","line":1},"id":"V-81925"},{"title":"MongoDB must enforce approved authorizations for logical access to\ninformation and system resources in accordance with applicable access control\npolicies.","desc":"MongoDB must enforce approved authorizations for logical access to\ninformation and system resources in accordance with applicable access control\npolicies.","descriptions":{"default":"MongoDB must enforce approved authorizations for logical access to\ninformation and system resources in accordance with applicable access control\npolicies.","rationale":"","check":"Review the system documentation to determine the required levels of\nprotection for DBMS server securables by type of login. Review the permissions\nactually in place on the server. If the actual permissions do not match the\ndocumented requirements, this is a finding.\n\n    MongoDB commands to view roles in a particular database:\n\n    db.getRoles(\n    {\n    rolesInfo: 1,\n    showPrivileges:true,\n    showBuiltinRoles: true\n    }\n    )","fix":"Use createRole(), updateRole(), dropRole(), grantRole() statements to add\nand remove permissions on server-level securables, bringing them into line with\nthe documented requirements.\n\n    MongoDB commands for role management can be found here:\n    https://docs.mongodb.com/v3.4/reference/method/js-role-management/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000033-DB-000084","gid":"V-81845","rid":"SV-96559r1_rule","stig_id":"MD3X-00-000020","fix_id":"F-88695r2_fix","cci":["CCI-000213"],"nist":["AC-3"]},"code":"control 'V-81845' do\n  title \"MongoDB must enforce approved authorizations for logical access to\ninformation and system resources in accordance with applicable access control\npolicies.\"\n  desc  \"MongoDB must enforce approved authorizations for logical access to\ninformation and system resources in accordance with applicable access control\npolicies.\"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the system documentation to determine the required levels of\nprotection for DBMS server securables by type of login. Review the permissions\nactually in place on the server. If the actual permissions do not match the\ndocumented requirements, this is a finding.\n\n    MongoDB commands to view roles in a particular database:\n\n    db.getRoles(\n    {\n    rolesInfo: 1,\n    showPrivileges:true,\n    showBuiltinRoles: true\n    }\n    )\n  \"\n  desc  'fix', \"\n    Use createRole(), updateRole(), dropRole(), grantRole() statements to add\nand remove permissions on server-level securables, bringing them into line with\nthe documented requirements.\n\n    MongoDB commands for role management can be found here:\n    https://docs.mongodb.com/v3.4/reference/method/js-role-management/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000033-DB-000084'\n  tag gid: 'V-81845'\n  tag rid: 'SV-96559r1_rule'\n  tag stig_id: 'MD3X-00-000020'\n  tag fix_id: 'F-88695r2_fix'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  if dbnames.empty?\n    describe 'There are no mongo databases, therefore for this control is NA' do\n      skip 'There are no mongo databases, therefore for this control is NA'\n    end\n  end\n\n  unless dbnames.empty?\n    dbnames.each do |dbs|\n      users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n      users.each do |t|\n        loc_colon = t.index(':')\n\n        user = t[loc_colon + 3..-1]\n\n        loc_quote = user.index('\"')\n\n        username = user[0, loc_quote]\n\n        getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"}, {roles: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n\n        getdb_roles.each do |r|\n          remove_role = r.index('[')\n          rr = r[remove_role..-1]\n\n          allowed_role = username\n          describe \"The database role for user: #{username}\" do\n            subject { rr }\n            it { should be_in attribute(\"#{allowed_role}_allowed_role\") }\n          end\n        end\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81845.rb","line":1},"id":"V-81845"},{"title":"MongoDB must only accept end entity certificates issued by DoD PKI or\nDoD-approved PKI Certification Authorities (CAs) for the establishment of all\nencrypted sessions.","desc":"Only DoD-approved external PKIs have been evaluated to ensure that\nthey have security controls and identity vetting procedures in place which are\nsufficient for DoD systems to rely on the identity asserted in the certificate.\nPKIs lacking sufficient security controls and identity vetting procedures risk\nbeing compromised and issuing certificates that enable adversaries to\nimpersonate legitimate users.\n\n    The authoritative list of DoD-approved PKIs is published at\nhttp://iase.disa.mil/pki-pke/interoperability.\n\n    This requirement focuses on communications protection for MongoDB session\nrather than for the network packet.","descriptions":{"default":"Only DoD-approved external PKIs have been evaluated to ensure that\nthey have security controls and identity vetting procedures in place which are\nsufficient for DoD systems to rely on the identity asserted in the certificate.\nPKIs lacking sufficient security controls and identity vetting procedures risk\nbeing compromised and issuing certificates that enable adversaries to\nimpersonate legitimate users.\n\n    The authoritative list of DoD-approved PKIs is published at\nhttp://iase.disa.mil/pki-pke/interoperability.\n\n    This requirement focuses on communications protection for MongoDB session\nrather than for the network packet.","rationale":"","check":"To run MongoDB in SSL mode, you have to obtain a valid certificate singed\nby a single certificate authority.\n\n    Before starting the MongoDB database in SSL mode, verify that certificate\nused is issued by a valid DoD certificate authority (openssl x509 -in\n<path_to_certificate_pem_file> -text | grep -i \"issuer\").\n\n    If there is any issuer present in the certificate that is not a DoD\napproved certificate authority, this is a finding.","fix":"Remove any certificate that was not issued by an approved DoD\ncertificate authority. Contact the organization's certificate issuer and\nrequest a new certificate that is issued by a valid DoD certificate\nauthorities."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000427-DB-000385","gid":"V-81917","rid":"SV-96631r1_rule","stig_id":"MD3X-00-000730","fix_id":"F-88767r1_fix","cci":["CCI-002470"],"nist":["SC-23 (5)"]},"code":"control 'V-81917' do\n  title \"MongoDB must only accept end entity certificates issued by DoD PKI or\nDoD-approved PKI Certification Authorities (CAs) for the establishment of all\nencrypted sessions.\"\n  desc  \"Only DoD-approved external PKIs have been evaluated to ensure that\nthey have security controls and identity vetting procedures in place which are\nsufficient for DoD systems to rely on the identity asserted in the certificate.\nPKIs lacking sufficient security controls and identity vetting procedures risk\nbeing compromised and issuing certificates that enable adversaries to\nimpersonate legitimate users.\n\n    The authoritative list of DoD-approved PKIs is published at\nhttp://iase.disa.mil/pki-pke/interoperability.\n\n    This requirement focuses on communications protection for MongoDB session\nrather than for the network packet.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    To run MongoDB in SSL mode, you have to obtain a valid certificate singed\nby a single certificate authority.\n\n    Before starting the MongoDB database in SSL mode, verify that certificate\nused is issued by a valid DoD certificate authority (openssl x509 -in\n<path_to_certificate_pem_file> -text | grep -i \\\"issuer\\\").\n\n    If there is any issuer present in the certificate that is not a DoD\napproved certificate authority, this is a finding.\n  \"\n  desc 'fix', \"Remove any certificate that was not issued by an approved DoD\ncertificate authority. Contact the organization's certificate issuer and\nrequest a new certificate that is issued by a valid DoD certificate\nauthorities.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000427-DB-000385'\n  tag gid: 'V-81917'\n  tag rid: 'SV-96631r1_rule'\n  tag stig_id: 'MD3X-00-000730'\n  tag fix_id: 'F-88767r1_fix'\n  tag cci: ['CCI-002470']\n  tag nist: ['SC-23 (5)']\n\n  describe 'The mongodb ssl certificate issuer' do\n    subject { command(\"openssl x509 -in /etc/ssl/mongodb.pem -text | grep -i 'issuer'\").stdout }\n    it { should include 'DoD' }\n  end\nend\n","source_location":{"ref":"controls/V-81917.rb","line":1},"id":"V-81917"},{"title":"MongoDB must uniquely identify and authenticate non-organizational\nusers (or processes acting on behalf of non-organizational users).","desc":"Non-organizational users include all information system users other\nthan organizational users, which include organizational employees or\nindividuals the organization deems to have equivalent status of employees\n(e.g., contractors, guest researchers, individuals from allied nations).\n\n    Non-organizational users must be uniquely identified and authenticated for\nall accesses other than those accesses explicitly identified and documented by\nthe organization when related to the use of anonymous access, such as accessing\na web server.\n\n    Accordingly, a risk assessment is used in determining the authentication\nneeds of the organization.\n\n    Scalability, practicality, and security are simultaneously considered in\nbalancing the need to ensure ease of use for access to federal information and\ninformation systems with the need to protect and adequately mitigate risk to\norganizational operations, organizational assets, individuals, other\norganizations, and the Nation.","descriptions":{"default":"Non-organizational users include all information system users other\nthan organizational users, which include organizational employees or\nindividuals the organization deems to have equivalent status of employees\n(e.g., contractors, guest researchers, individuals from allied nations).\n\n    Non-organizational users must be uniquely identified and authenticated for\nall accesses other than those accesses explicitly identified and documented by\nthe organization when related to the use of anonymous access, such as accessing\na web server.\n\n    Accordingly, a risk assessment is used in determining the authentication\nneeds of the organization.\n\n    Scalability, practicality, and security are simultaneously considered in\nbalancing the need to ensure ease of use for access to federal information and\ninformation systems with the need to protect and adequately mitigate risk to\norganizational operations, organizational assets, individuals, other\norganizations, and the Nation.","rationale":"","check":"MongoDB grants access to data and commands through role-based authorization\nand provides built-in roles that provide the different levels of access\ncommonly needed in a database system. You can additionally create user-defined\nroles.\n\n    Check a user's role to ensure correct privileges for the function:\n\n    Prereq: To view a user's roles, you must have the \"viewUser\" privilege.\n\n    Connect to MongoDB.\n\n    For each database in the system, identify the user's roles for the database:\n\n    use <database>\n    db.getUser(\"[username]\")\n\n    The server will return a document with the user's roles.\n\n    View a role's privileges:\n\n    Prereq: To view a user's roles, you must have the \"viewUser\" privilege.\n\n    For each database, identify the privileges granted by a role:\n\n    use <database>\n    db.getRole( \"read\", { showPrivileges: true } )\n\n    The server will return a document with the \"privileges\" and\n\"inheritedPrivileges\" arrays. The \"privileges returned document lists the\nprivileges directly specified by the role and excludes those privileges\ninherited from other roles. The \"inheritedPrivileges\" returned document lists\nall privileges granted by this role, both directly specified and inherited. If\nthe role does not inherit from other roles, the two fields are the same.\n\n    If a user has a role with inappropriate privileges, this is a finding.","fix":"Prereq: To view a user's roles, must have the \"viewUser\" privilege.\n\n    Connect to MongoDB.\n\n    For each database, identify the user's roles for the database.\n\n    use <database>\n    db.getUser(\"[username]\")\n\n    The server will return a document with the user's roles.\n\n    To revoke a user's role from a database use the db.revokeRolesFromUser()\nmethod.\n\n    To grant a role to a user use the db.grantRolesToUser() method."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000180-DB-000115","satisfies":["SRG-APP-000180-DB-000115","SRG-APP-000211-DB-000122","SRG-APP-000211-DB-000124"],"gid":"V-81877","rid":"SV-96591r1_rule","stig_id":"MD3X-00-000390","fix_id":"F-88727r2_fix","cci":["CCI-000804","CCI-001082","CCI-001084"],"nist":["IA-8","SC-2","SC-3"]},"code":"control 'V-81877' do\n  title \"MongoDB must uniquely identify and authenticate non-organizational\nusers (or processes acting on behalf of non-organizational users).\"\n  desc  \"Non-organizational users include all information system users other\nthan organizational users, which include organizational employees or\nindividuals the organization deems to have equivalent status of employees\n(e.g., contractors, guest researchers, individuals from allied nations).\n\n    Non-organizational users must be uniquely identified and authenticated for\nall accesses other than those accesses explicitly identified and documented by\nthe organization when related to the use of anonymous access, such as accessing\na web server.\n\n    Accordingly, a risk assessment is used in determining the authentication\nneeds of the organization.\n\n    Scalability, practicality, and security are simultaneously considered in\nbalancing the need to ensure ease of use for access to federal information and\ninformation systems with the need to protect and adequately mitigate risk to\norganizational operations, organizational assets, individuals, other\norganizations, and the Nation.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    MongoDB grants access to data and commands through role-based authorization\nand provides built-in roles that provide the different levels of access\ncommonly needed in a database system. You can additionally create user-defined\nroles.\n\n    Check a user's role to ensure correct privileges for the function:\n\n    Prereq: To view a user's roles, you must have the \\\"viewUser\\\" privilege.\n\n    Connect to MongoDB.\n\n    For each database in the system, identify the user's roles for the database:\n\n    use <database>\n    db.getUser(\\\"[username]\\\")\n\n    The server will return a document with the user's roles.\n\n    View a role's privileges:\n\n    Prereq: To view a user's roles, you must have the \\\"viewUser\\\" privilege.\n\n    For each database, identify the privileges granted by a role:\n\n    use <database>\n    db.getRole( \\\"read\\\", { showPrivileges: true } )\n\n    The server will return a document with the \\\"privileges\\\" and\n\\\"inheritedPrivileges\\\" arrays. The \\\"privileges returned document lists the\nprivileges directly specified by the role and excludes those privileges\ninherited from other roles. The \\\"inheritedPrivileges\\\" returned document lists\nall privileges granted by this role, both directly specified and inherited. If\nthe role does not inherit from other roles, the two fields are the same.\n\n    If a user has a role with inappropriate privileges, this is a finding.\n  \"\n  desc 'fix', \"\n    Prereq: To view a user's roles, must have the \\\"viewUser\\\" privilege.\n\n    Connect to MongoDB.\n\n    For each database, identify the user's roles for the database.\n\n    use <database>\n    db.getUser(\\\"[username]\\\")\n\n    The server will return a document with the user's roles.\n\n    To revoke a user's role from a database use the db.revokeRolesFromUser()\nmethod.\n\n    To grant a role to a user use the db.grantRolesToUser() method.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000180-DB-000115'\n  tag satisfies: %w(SRG-APP-000180-DB-000115 SRG-APP-000211-DB-000122\nSRG-APP-000211-DB-000124)\n  tag gid: 'V-81877'\n  tag rid: 'SV-96591r1_rule'\n  tag stig_id: 'MD3X-00-000390'\n  tag fix_id: 'F-88727r2_fix'\n  tag cci: %w(CCI-000804 CCI-001082 CCI-001084)\n  tag nist: %w(IA-8 SC-2 SC-3)\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  if dbnames.empty?\n    describe 'There are no mongo databases, therefore for this control is NA' do\n      skip 'There are no mongo databases, therefore for this control is NA'\n    end\n  end\n\n  unless dbnames.empty?\n\n    dbnames.each do |dbs|\n      users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n      users.each do |t|\n        loc_colon = t.index(':')\n\n        user = t[loc_colon + 3..-1]\n\n        loc_quote = user.index('\"')\n\n        username = user[0, loc_quote]\n\n        getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"}, {roles: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n\n        getdb_roles.each do |r|\n          remove_role = r.index('[')\n          rr = r[remove_role..-1]\n\n          allowed_role = username\n          describe \"The database role for user: #{username}\" do\n            subject { rr }\n            it { should be_in attribute(\"#{allowed_role}_allowed_role\") }\n          end\n        end\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81877.rb","line":1},"id":"V-81877"},{"title":"MongoDB must provide the means for individuals in authorized roles to\nchange the auditing to be performed on all application components, based on all\nselectable event criteria within organization-defined time thresholds.","desc":"If authorized individuals do not have the ability to modify auditing\nparameters in response to a changing threat environment, the organization may\nnot be able to effectively respond, and important forensic information may be\nlost.\n\n    This requirement enables organizations to extend or limit auditing as\nnecessary to meet organizational requirements. Auditing that is limited to\nconserve information system resources may be extended to address certain threat\nsituations. In addition, auditing may be limited to a specific set of events to\nfacilitate audit reduction, analysis, and reporting. Organizations can\nestablish time thresholds in which audit actions are changed, for example, near\nreal time, within minutes, or within hours.","descriptions":{"default":"If authorized individuals do not have the ability to modify auditing\nparameters in response to a changing threat environment, the organization may\nnot be able to effectively respond, and important forensic information may be\nlost.\n\n    This requirement enables organizations to extend or limit auditing as\nnecessary to meet organizational requirements. Auditing that is limited to\nconserve information system resources may be extended to address certain threat\nsituations. In addition, auditing may be limited to a specific set of events to\nfacilitate audit reduction, analysis, and reporting. Organizations can\nestablish time thresholds in which audit actions are changed, for example, near\nreal time, within minutes, or within hours.","rationale":"","check":"The MongoDB auditing facility allows authorized administrators and users\ntrack system activity. Once auditing is configured and enabled, changes to the\naudit events and filters require restarting the mongod (and mongos, if\napplicable) instances. This can be done with zero down time by performing the\nmodifications using a rolling maintenance approach (i.e., change the parameters\non the secondaries, step down the primary such that one of the reconfigured\nsecondaries becomes the primary then reconfigure the old primary).\n\n    If replica sets or the rolling maintenance approach is not used for the\nprocedure by the application owner, this is a finding.","fix":"Use the rolling maintenance procedure.\n\n    For each member of a replica set, starting with a secondary member, perform\nthe following sequence of events, ending with the primary:\n\n    1. Restart the mongod instance as a standalone.\n    2. Perform the configure auditing task on the standalone instance.\n    3. Restart the mongod instance as a member of the replica set."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000353-DB-000324","gid":"V-81901","rid":"SV-96615r1_rule","stig_id":"MD3X-00-000590","fix_id":"F-88751r1_fix","cci":["CCI-001914"],"nist":["AU-12 (3)"],"sdlc_stages":["scm"]},"code":"control 'V-81901' do\n  title \"MongoDB must provide the means for individuals in authorized roles to\nchange the auditing to be performed on all application components, based on all\nselectable event criteria within organization-defined time thresholds.\"\n  desc  \"If authorized individuals do not have the ability to modify auditing\nparameters in response to a changing threat environment, the organization may\nnot be able to effectively respond, and important forensic information may be\nlost.\n\n    This requirement enables organizations to extend or limit auditing as\nnecessary to meet organizational requirements. Auditing that is limited to\nconserve information system resources may be extended to address certain threat\nsituations. In addition, auditing may be limited to a specific set of events to\nfacilitate audit reduction, analysis, and reporting. Organizations can\nestablish time thresholds in which audit actions are changed, for example, near\nreal time, within minutes, or within hours.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    The MongoDB auditing facility allows authorized administrators and users\ntrack system activity. Once auditing is configured and enabled, changes to the\naudit events and filters require restarting the mongod (and mongos, if\napplicable) instances. This can be done with zero down time by performing the\nmodifications using a rolling maintenance approach (i.e., change the parameters\non the secondaries, step down the primary such that one of the reconfigured\nsecondaries becomes the primary then reconfigure the old primary).\n\n    If replica sets or the rolling maintenance approach is not used for the\nprocedure by the application owner, this is a finding.\n  \"\n  desc  'fix', \"\n    Use the rolling maintenance procedure.\n\n    For each member of a replica set, starting with a secondary member, perform\nthe following sequence of events, ending with the primary:\n\n    1. Restart the mongod instance as a standalone.\n    2. Perform the configure auditing task on the standalone instance.\n    3. Restart the mongod instance as a member of the replica set.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000353-DB-000324'\n  tag gid: 'V-81901'\n  tag rid: 'SV-96615r1_rule'\n  tag stig_id: 'MD3X-00-000590'\n  tag fix_id: 'F-88751r1_fix'\n  tag cci: ['CCI-001914']\n  tag nist: ['AU-12 (3)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog destination)) { should cmp 'syslog' }\n  end\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog filter)) { should be_nil }\n  end\nend\n","source_location":{"ref":"controls/V-81901.rb","line":1},"id":"V-81901"},{"title":"MongoDB must fail to a secure state if system initialization fails,\nshutdown fails, or aborts fail.","desc":"Failure to a known state can address safety or security in accordance\nwith the mission/business needs of the organization.\n\n    Failure to a known secure state helps prevent a loss of confidentiality,\nintegrity, or availability in the event of a failure of the information system\nor a component of the system.\n\n    Failure to a known safe state helps prevent systems from failing to a state\nthat may cause loss of data or unauthorized access to system resources. Systems\nthat fail suddenly and with no incorporated failure state planning may leave\nthe hosting system available but with a reduced security protection capability.\nPreserving information system state data also facilitates system restart and\nreturn to the operational mode of the organization with less disruption of\nmission/business processes.\n\n    Databases must fail to a known consistent state. Transactions must be\nsuccessfully completed or rolled back.\n\n    In general, security mechanisms should be designed so that a failure will\nfollow the same execution path as disallowing the operation. For example,\napplication security methods, such as isAuthorized(), isAuthenticated(), and\nvalidate(), should all return false if there is an exception during processing.\nIf security controls can throw exceptions, they must be very clear about\nexactly what that condition means.\n\n    Abort refers to stopping a program or function before it has finished\nnaturally. The term abort refers to both requested and unexpected terminations.","descriptions":{"default":"Failure to a known state can address safety or security in accordance\nwith the mission/business needs of the organization.\n\n    Failure to a known secure state helps prevent a loss of confidentiality,\nintegrity, or availability in the event of a failure of the information system\nor a component of the system.\n\n    Failure to a known safe state helps prevent systems from failing to a state\nthat may cause loss of data or unauthorized access to system resources. Systems\nthat fail suddenly and with no incorporated failure state planning may leave\nthe hosting system available but with a reduced security protection capability.\nPreserving information system state data also facilitates system restart and\nreturn to the operational mode of the organization with less disruption of\nmission/business processes.\n\n    Databases must fail to a known consistent state. Transactions must be\nsuccessfully completed or rolled back.\n\n    In general, security mechanisms should be designed so that a failure will\nfollow the same execution path as disallowing the operation. For example,\napplication security methods, such as isAuthorized(), isAuthenticated(), and\nvalidate(), should all return false if there is an exception during processing.\nIf security controls can throw exceptions, they must be very clear about\nexactly what that condition means.\n\n    Abort refers to stopping a program or function before it has finished\nnaturally. The term abort refers to both requested and unexpected terminations.","rationale":"","check":"Journaling is enabled by default in 64-bit systems.\n\n    With journaling enabled, if mongod stops unexpectedly, the program can\nrecover everything written to the journal.\n\n    MongoDB will re-apply the write operations on restart and maintain a\nconsistent state. By default, the greatest extent of lost writes, i.e., those\nnot made to the journal, are those made in the last 100 milliseconds, plus the\ntime it takes to perform the actual journal writes.\n\n    Verify the mongod process startup options.\n\n    If the mongod process was started with the \"--nojournal\" option, this is\na finding.","fix":"Modify the mongod startup command-line options by removing the\n\"--nojournal\" option.\n\n    Edit the MongoDB database configuration file (default location:\n/etc/mongod.conf) to ensure it contains the following parameter setting:\n\n    storage:\n    journal:\n    enabled: true\n\n    Stop/start (restart) any or all mongod processes."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000225-DB-000153","satisfies":["SRG-APP-000225-DB-000153","SRG-APP-000226-DB-000147"],"gid":"V-81881","rid":"SV-96595r1_rule","stig_id":"MD3X-00-000420","fix_id":"F-88731r1_fix","cci":["CCI-001190","CCI-001665"],"nist":["SC-24","SC-24"],"sdlc_stages":["scm"]},"code":"control 'V-81881' do\n  title \"MongoDB must fail to a secure state if system initialization fails,\nshutdown fails, or aborts fail.\"\n  desc  \"Failure to a known state can address safety or security in accordance\nwith the mission/business needs of the organization.\n\n    Failure to a known secure state helps prevent a loss of confidentiality,\nintegrity, or availability in the event of a failure of the information system\nor a component of the system.\n\n    Failure to a known safe state helps prevent systems from failing to a state\nthat may cause loss of data or unauthorized access to system resources. Systems\nthat fail suddenly and with no incorporated failure state planning may leave\nthe hosting system available but with a reduced security protection capability.\nPreserving information system state data also facilitates system restart and\nreturn to the operational mode of the organization with less disruption of\nmission/business processes.\n\n    Databases must fail to a known consistent state. Transactions must be\nsuccessfully completed or rolled back.\n\n    In general, security mechanisms should be designed so that a failure will\nfollow the same execution path as disallowing the operation. For example,\napplication security methods, such as isAuthorized(), isAuthenticated(), and\nvalidate(), should all return false if there is an exception during processing.\nIf security controls can throw exceptions, they must be very clear about\nexactly what that condition means.\n\n    Abort refers to stopping a program or function before it has finished\nnaturally. The term abort refers to both requested and unexpected terminations.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Journaling is enabled by default in 64-bit systems.\n\n    With journaling enabled, if mongod stops unexpectedly, the program can\nrecover everything written to the journal.\n\n    MongoDB will re-apply the write operations on restart and maintain a\nconsistent state. By default, the greatest extent of lost writes, i.e., those\nnot made to the journal, are those made in the last 100 milliseconds, plus the\ntime it takes to perform the actual journal writes.\n\n    Verify the mongod process startup options.\n\n    If the mongod process was started with the \\\"--nojournal\\\" option, this is\na finding.\n  \"\n  desc 'fix', \"\n    Modify the mongod startup command-line options by removing the\n\\\"--nojournal\\\" option.\n\n    Edit the MongoDB database configuration file (default location:\n/etc/mongod.conf) to ensure it contains the following parameter setting:\n\n    storage:\n    journal:\n    enabled: true\n\n    Stop/start (restart) any or all mongod processes.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000225-DB-000153'\n  tag satisfies: %w(SRG-APP-000225-DB-000153 SRG-APP-000226-DB-000147)\n  tag gid: 'V-81881'\n  tag rid: 'SV-96595r1_rule'\n  tag stig_id: 'MD3X-00-000420'\n  tag fix_id: 'F-88731r1_fix'\n  tag cci: %w(CCI-001190 CCI-001665)\n  tag nist: %w(SC-24 SC-24)\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(storage journal enabled)) { should cmp 'true' }\n  end\nend\n","source_location":{"ref":"controls/V-81881.rb","line":1},"id":"V-81881"},{"title":"MongoDB and associated applications must reserve the use of dynamic\ncode execution for situations that require it.","desc":"With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","descriptions":{"default":"With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","rationale":"","check":"MongoDB operations permit arbitrary JavaScript expressions to be run\ndirectly on the server.\n\n    If the following parameter is not present or not set as show below in the\nMongoDB configuration file (default location: /etc/mongod.conf), this is a\nfinding.\n\n    security:\n    javascriptEnabled: \"false\"","fix":"Disable the \"javascriptEnabled\" option.\n\n    Edit the MongoDB configuration file (default location: /etc/mongod.conf\"\nto include the following:\n\n    security:\n    javascriptEnabled: false"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000251-DB-000391","satisfies":["SRG-APP-000251-DB-000391","SRG-APP-000251-DB-000392"],"gid":"V-81891","rid":"SV-96605r1_rule","stig_id":"MD3X-00-000500","fix_id":"F-88741r1_fix","cci":["CCI-001310"],"nist":["SI-10"],"sdlc_stages":["scm"]},"code":"control 'V-81891' do\n  title \"MongoDB and associated applications must reserve the use of dynamic\ncode execution for situations that require it.\"\n  desc  \"With respect to database management systems, one class of threat is\nknown as SQL Injection, or more generally, code injection. It takes advantage\nof the dynamic execution capabilities of various programming languages,\nincluding dialects of SQL. In such cases, the attacker deduces the manner in\nwhich SQL statements are being processed, either from inside knowledge or by\nobserving system behavior in response to invalid inputs. When the attacker\nidentifies scenarios where SQL queries are being assembled by application code\n(which may be within the database or separate from it) and executed\ndynamically, the attacker is then able to craft input strings that subvert the\nintent of the query. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    The principal protection against code injection is not to use dynamic\nexecution except where it provides necessary functionality that cannot be\nutilized otherwise. Use strongly typed data items rather than general-purpose\nstrings as input parameters to task-specific, pre-compiled stored procedures\nand functions (and triggers).\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    MongoDB operations permit arbitrary JavaScript expressions to be run\ndirectly on the server.\n\n    If the following parameter is not present or not set as show below in the\nMongoDB configuration file (default location: /etc/mongod.conf), this is a\nfinding.\n\n    security:\n    javascriptEnabled: \\\"false\\\"\n  \"\n  desc 'fix', \"\n    Disable the \\\"javascriptEnabled\\\" option.\n\n    Edit the MongoDB configuration file (default location: /etc/mongod.conf\\\"\nto include the following:\n\n    security:\n    javascriptEnabled: false\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000251-DB-000391'\n  tag satisfies: %w(SRG-APP-000251-DB-000391 SRG-APP-000251-DB-000392)\n  tag gid: 'V-81891'\n  tag rid: 'SV-96605r1_rule'\n  tag stig_id: 'MD3X-00-000500'\n  tag fix_id: 'F-88741r1_fix'\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security javascriptEnabled)) { should cmp 'false' }\n  end\nend\n","source_location":{"ref":"controls/V-81891.rb","line":1},"id":"V-81891"},{"title":"MongoDB must provide a warning to appropriate support staff when\nallocated audit record storage volume reaches 75% of maximum audit record\nstorage capacity.","desc":"Organizations are required to use a central log management system, so,\nunder normal conditions, the audit space allocated to MongoDB on its own server\nwill not be an issue. However, space will still be required on MongoDB server\nfor audit records in transit, and, under abnormal conditions, this could fill\nup. Since a requirement exists to halt processing upon audit failure, a service\noutage would result.\n\n    If support personnel are not notified immediately upon storage volume\nutilization reaching 75%, they are unable to plan for storage capacity\nexpansion.\n\n    The appropriate support staff include, at a minimum, the ISSO and the\nDBA/SA.","descriptions":{"default":"Organizations are required to use a central log management system, so,\nunder normal conditions, the audit space allocated to MongoDB on its own server\nwill not be an issue. However, space will still be required on MongoDB server\nfor audit records in transit, and, under abnormal conditions, this could fill\nup. Since a requirement exists to halt processing upon audit failure, a service\noutage would result.\n\n    If support personnel are not notified immediately upon storage volume\nutilization reaching 75%, they are unable to plan for storage capacity\nexpansion.\n\n    The appropriate support staff include, at a minimum, the ISSO and the\nDBA/SA.","rationale":"","check":"A MongoDB audit log that is configured to be stored in a file is identified\nin the MongoDB configuration file (default: /etc/mongod.conf) under the\n\"auditLog:\" key and subkey \"destination:\" where \"destination\" is\n\"file\".\n\n    If this is the case then the \"AuditLog:\" subkey \"path:\" determines\nwhere (device/directory) that file will be located.\n\n    View the mongodb configuration file (default location: /etc/mongod.conf)\nand identify how the \"auditlog.destination\" is configured.\n\n    When the \"auditlog.destination\" is \"file\", this is a finding.","fix":"View the mongodb configuration file (default location: /etc/mongod.conf)\nand view the \"auditlog.path\" to identify the storage volume.\n\n    Install MongoDB Ops Manager or other organization approved monitoring\nsoftware.\n\n    Configure the required alert in the monitoring software to send an alert\nwhere storage volume holding the auditLog file utilization reaches 75%."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000359-DB-000319","gid":"V-81907","rid":"SV-96621r1_rule","stig_id":"MD3X-00-000630","fix_id":"F-88757r2_fix","cci":["CCI-001855"],"nist":["AU-5 (1)"],"sdlc_stages":["scm"]},"code":"control 'V-81907' do\n  title \"MongoDB must provide a warning to appropriate support staff when\nallocated audit record storage volume reaches 75% of maximum audit record\nstorage capacity.\"\n  desc  \"Organizations are required to use a central log management system, so,\nunder normal conditions, the audit space allocated to MongoDB on its own server\nwill not be an issue. However, space will still be required on MongoDB server\nfor audit records in transit, and, under abnormal conditions, this could fill\nup. Since a requirement exists to halt processing upon audit failure, a service\noutage would result.\n\n    If support personnel are not notified immediately upon storage volume\nutilization reaching 75%, they are unable to plan for storage capacity\nexpansion.\n\n    The appropriate support staff include, at a minimum, the ISSO and the\nDBA/SA.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    A MongoDB audit log that is configured to be stored in a file is identified\nin the MongoDB configuration file (default: /etc/mongod.conf) under the\n\\\"auditLog:\\\" key and subkey \\\"destination:\\\" where \\\"destination\\\" is\n\\\"file\\\".\n\n    If this is the case then the \\\"AuditLog:\\\" subkey \\\"path:\\\" determines\nwhere (device/directory) that file will be located.\n\n    View the mongodb configuration file (default location: /etc/mongod.conf)\nand identify how the \\\"auditlog.destination\\\" is configured.\n\n    When the \\\"auditlog.destination\\\" is \\\"file\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    View the mongodb configuration file (default location: /etc/mongod.conf)\nand view the \\\"auditlog.path\\\" to identify the storage volume.\n\n    Install MongoDB Ops Manager or other organization approved monitoring\nsoftware.\n\n    Configure the required alert in the monitoring software to send an alert\nwhere storage volume holding the auditLog file utilization reaches 75%.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000359-DB-000319'\n  tag gid: 'V-81907'\n  tag rid: 'SV-96621r1_rule'\n  tag stig_id: 'MD3X-00-000630'\n  tag fix_id: 'F-88757r2_fix'\n  tag cci: ['CCI-001855']\n  tag nist: ['AU-5 (1)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog destination)) { should_not cmp 'file' }\n  end\nend\n","source_location":{"ref":"controls/V-81907.rb","line":1},"id":"V-81907"},{"title":"MongoDB must check the validity of all data inputs except those\nspecifically identified by the organization.","desc":"Invalid user input occurs when a user inserts data or characters into\nan application's data entry fields and the application is unprepared to process\nthat data. This results in unanticipated application behavior, potentially\nleading to an application or information system compromise. Invalid user input\nis one of the primary methods employed when attempting to compromise an\napplication.\n\n    With respect to database management systems, one class of threat is known\nas SQL Injection, or more generally, code injection. It takes advantage of the\ndynamic execution capabilities of various programming languages, including\ndialects of SQL. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    Even when no such hijacking takes place, invalid input that gets recorded\nin the database, whether accidental or malicious, reduces the reliability and\nusability of the system. Available protections include data types, referential\nconstraints, uniqueness constraints, range checking, and application-specific\nlogic. Application-specific logic can be implemented within the database in\nstored procedures and triggers, where appropriate.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","descriptions":{"default":"Invalid user input occurs when a user inserts data or characters into\nan application's data entry fields and the application is unprepared to process\nthat data. This results in unanticipated application behavior, potentially\nleading to an application or information system compromise. Invalid user input\nis one of the primary methods employed when attempting to compromise an\napplication.\n\n    With respect to database management systems, one class of threat is known\nas SQL Injection, or more generally, code injection. It takes advantage of the\ndynamic execution capabilities of various programming languages, including\ndialects of SQL. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    Even when no such hijacking takes place, invalid input that gets recorded\nin the database, whether accidental or malicious, reduces the reliability and\nusability of the system. Available protections include data types, referential\nconstraints, uniqueness constraints, range checking, and application-specific\nlogic. Application-specific logic can be implemented within the database in\nstored procedures and triggers, where appropriate.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","rationale":"","check":"As a client program assembles a query in MongoDB, it builds a BSON object,\nnot a string. Thus traditional SQL injection attacks are not a problem.\nHowever, MongoDB operations permit arbitrary JavaScript expressions to be run\ndirectly on the server.\n\n    If the \"security.javascriptEnabled\" option is set to \"true\" in the\nconfig file, this is a finding.\n\n    Starting with MongoDB 3.2, database-level document validation can be\nconfigured for specific collections. Configured validation rules for the\nselected database can be viewed via the\ndb.getSisterDB(\"database_name\").getCollectionInfos() command in mongo shell.\n\n    If validation is desired, but no rules are set, the valdiationAction is not\n\"error\" or the \"bypassDocumentValidation\" option is used for write commands\non the application side, this is a finding.","fix":"Disable the javascriptEnabled option in the config file.\n\n    security:\n    javascriptEnabled: false\n\n    If document validation is needed, it should be configured according to the\ndocumentation page at https://docs.mongodb.com/manual/core/document-validation/."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000251-DB-000160","gid":"V-81889","rid":"SV-96603r1_rule","stig_id":"MD3X-00-000490","fix_id":"F-88739r1_fix","cci":["CCI-001310"],"nist":["SI-10"],"sdlc_stages":["scm"]},"code":"control 'V-81889' do\n  title \"MongoDB must check the validity of all data inputs except those\nspecifically identified by the organization.\"\n  desc  \"Invalid user input occurs when a user inserts data or characters into\nan application's data entry fields and the application is unprepared to process\nthat data. This results in unanticipated application behavior, potentially\nleading to an application or information system compromise. Invalid user input\nis one of the primary methods employed when attempting to compromise an\napplication.\n\n    With respect to database management systems, one class of threat is known\nas SQL Injection, or more generally, code injection. It takes advantage of the\ndynamic execution capabilities of various programming languages, including\ndialects of SQL. Potentially, the attacker can gain unauthorized access to\ndata, including security settings, and severely corrupt or destroy the database.\n\n    Even when no such hijacking takes place, invalid input that gets recorded\nin the database, whether accidental or malicious, reduces the reliability and\nusability of the system. Available protections include data types, referential\nconstraints, uniqueness constraints, range checking, and application-specific\nlogic. Application-specific logic can be implemented within the database in\nstored procedures and triggers, where appropriate.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    As a client program assembles a query in MongoDB, it builds a BSON object,\nnot a string. Thus traditional SQL injection attacks are not a problem.\nHowever, MongoDB operations permit arbitrary JavaScript expressions to be run\ndirectly on the server.\n\n    If the \\\"security.javascriptEnabled\\\" option is set to \\\"true\\\" in the\nconfig file, this is a finding.\n\n    Starting with MongoDB 3.2, database-level document validation can be\nconfigured for specific collections. Configured validation rules for the\nselected database can be viewed via the\ndb.getSisterDB(\\\"database_name\\\").getCollectionInfos() command in mongo shell.\n\n    If validation is desired, but no rules are set, the valdiationAction is not\n\\\"error\\\" or the \\\"bypassDocumentValidation\\\" option is used for write commands\non the application side, this is a finding.\n  \"\n  desc 'fix', \"\n    Disable the javascriptEnabled option in the config file.\n\n    security:\n    javascriptEnabled: false\n\n    If document validation is needed, it should be configured according to the\ndocumentation page at https://docs.mongodb.com/manual/core/document-validation/.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000251-DB-000160'\n  tag gid: 'V-81889'\n  tag rid: 'SV-96603r1_rule'\n  tag stig_id: 'MD3X-00-000490'\n  tag fix_id: 'F-88739r1_fix'\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security javascriptEnabled)) { should cmp 'false' }\n  end\nend\n","source_location":{"ref":"controls/V-81889.rb","line":1},"id":"V-81889"},{"title":"MongoDB must enforce access restrictions associated with changes to\nthe configuration of MongoDB or database(s).","desc":"Failure to provide logical access restrictions associated with changes\nto configuration may have significant effects on the overall security of the\nsystem.\n\n    When dealing with access restrictions pertaining to change control, it\nshould be noted that any changes to the hardware, software, and/or firmware\ncomponents of the information system can potentially have significant effects\non the overall security of the system.\n\n    Accordingly, only qualified and authorized individuals should be allowed to\nobtain access to system components for the purposes of initiating changes,\nincluding upgrades and modifications.","descriptions":{"default":"Failure to provide logical access restrictions associated with changes\nto configuration may have significant effects on the overall security of the\nsystem.\n\n    When dealing with access restrictions pertaining to change control, it\nshould be noted that any changes to the hardware, software, and/or firmware\ncomponents of the information system can potentially have significant effects\non the overall security of the system.\n\n    Accordingly, only qualified and authorized individuals should be allowed to\nobtain access to system components for the purposes of initiating changes,\nincluding upgrades and modifications.","rationale":"","check":"Review the security configuration of the MongoDB database(s).\n\n    If unauthorized users can start the mongod or mongos processes or edit the\nMongoDB configuration file (default location: /etc/mongod.conf), this is a\nfinding.\n\n    If MongoDB does not enforce access restrictions associated with changes to\nthe configuration of the database(s), this is a finding.\n\n    To assist in conducting reviews of permissions, the following MongoDB\ncommands describe permissions of databases and users:\n\n    Permissions of concern in this respect include the following, and possibly\nothers:\n    - any user with a role of userAdminAnyDatabase role or userAdmin role\n    - any database or with a user have a role or privilege with \"C\" (create)\nor \"w\" (update) privileges that are not necessary\n\n    MongoDB commands to view roles in a particular database:\n    db.getRoles( { rolesInfo: 1, showPrivileges:true, showBuiltinRoles: true })","fix":"Prereq: To view a user's roles, must have the \"viewUser\" privilege.\n    https://docs.mongodb.com/v3.4/reference/privilege-actions/\n\n    Connect to MongoDB.\n\n    For each database, identify the user's roles for the database.\n\n    use <database>\n    db.getUser(\"[username]\")\n\n    The server will return a document with the user's roles.\n\n    To revoke a user's role from a database use the db.revokeRolesFromUser()\nmethod.\n    https://docs.mongodb.com/v3.4/reference/method/db.revokeRolesFromUser/\n\n    To grant a role to a user use the db.grantRolesToUser() method.\nhttps://docs.mongodb.com/v3.4/reference/method/db.grantRolesToUser/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000380-DB-000360","gid":"V-81911","rid":"SV-96625r1_rule","stig_id":"MD3X-00-000670","fix_id":"F-88761r1_fix","cci":["CCI-001813"],"nist":["CM-5 (1)"]},"code":"control 'V-81911' do\n  title \"MongoDB must enforce access restrictions associated with changes to\nthe configuration of MongoDB or database(s).\"\n  desc  \"Failure to provide logical access restrictions associated with changes\nto configuration may have significant effects on the overall security of the\nsystem.\n\n    When dealing with access restrictions pertaining to change control, it\nshould be noted that any changes to the hardware, software, and/or firmware\ncomponents of the information system can potentially have significant effects\non the overall security of the system.\n\n    Accordingly, only qualified and authorized individuals should be allowed to\nobtain access to system components for the purposes of initiating changes,\nincluding upgrades and modifications.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the security configuration of the MongoDB database(s).\n\n    If unauthorized users can start the mongod or mongos processes or edit the\nMongoDB configuration file (default location: /etc/mongod.conf), this is a\nfinding.\n\n    If MongoDB does not enforce access restrictions associated with changes to\nthe configuration of the database(s), this is a finding.\n\n    To assist in conducting reviews of permissions, the following MongoDB\ncommands describe permissions of databases and users:\n\n    Permissions of concern in this respect include the following, and possibly\nothers:\n    - any user with a role of userAdminAnyDatabase role or userAdmin role\n    - any database or with a user have a role or privilege with \\\"C\\\" (create)\nor \\\"w\\\" (update) privileges that are not necessary\n\n    MongoDB commands to view roles in a particular database:\n    db.getRoles( { rolesInfo: 1, showPrivileges:true, showBuiltinRoles: true })\n  \"\n  desc 'fix', \"\n    Prereq: To view a user's roles, must have the \\\"viewUser\\\" privilege.\n    https://docs.mongodb.com/v3.4/reference/privilege-actions/\n\n    Connect to MongoDB.\n\n    For each database, identify the user's roles for the database.\n\n    use <database>\n    db.getUser(\\\"[username]\\\")\n\n    The server will return a document with the user's roles.\n\n    To revoke a user's role from a database use the db.revokeRolesFromUser()\nmethod.\n    https://docs.mongodb.com/v3.4/reference/method/db.revokeRolesFromUser/\n\n    To grant a role to a user use the db.grantRolesToUser() method.\nhttps://docs.mongodb.com/v3.4/reference/method/db.grantRolesToUser/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000380-DB-000360'\n  tag gid: 'V-81911'\n  tag rid: 'SV-96625r1_rule'\n  tag stig_id: 'MD3X-00-000670'\n  tag fix_id: 'F-88761r1_fix'\n  tag cci: ['CCI-001813']\n  tag nist: ['CM-5 (1)']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  if dbnames.empty?\n    describe 'There are no mongo databases, therefore for this control is NA' do\n      skip 'There are no mongo databases, therefore for this control is NA'\n    end\n  end\n\n  unless dbnames.empty?\n\n    dbnames.each do |dbs|\n      users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n      users.each do |t|\n        loc_colon = t.index(':')\n\n        user = t[loc_colon + 3..-1]\n\n        loc_quote = user.index('\"')\n\n        username = user[0, loc_quote]\n\n        getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"}, {roles: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n\n        getdb_roles.each do |r|\n          remove_role = r.index('[')\n          rr = r[remove_role..-1]\n\n          allowed_role = username\n          describe \"The database role for user: #{username}\" do\n            subject { rr }\n            it { should be_in attribute(\"#{allowed_role}_allowed_role\") }\n          end\n        end\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81911.rb","line":1},"id":"V-81911"},{"title":"If passwords are used for authentication, MongoDB must store only\nhashed, salted representations of passwords.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, database passwords stored in clear text, using reversible\nencryption, or using unsalted hashes would be vulnerable to unauthorized\ndisclosure. Database passwords must always be in the form of one-way, salted\nhashes when stored internally or externally to MongoDB.","descriptions":{"default":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, database passwords stored in clear text, using reversible\nencryption, or using unsalted hashes would be vulnerable to unauthorized\ndisclosure. Database passwords must always be in the form of one-way, salted\nhashes when stored internally or externally to MongoDB.","rationale":"","check":"MongoDB supports x.509 certificate authentication for use with a secure\nTLS/SSL connection.\n\n    The x.509 client authentication allows clients to authenticate to servers\nwith certificates rather than with a username and password.\n\n    If X.509 authentication is not used, a SCRAM-SHA-1 authentication protocol\nis also available. The SCRAM-SHA-1 protocol uses one-way, salted hash functions\nfor passwords as documented here:\nhttps://docs.mongodb.com/v3.4/core/security-scram-sha-1/\n\n    To authenticate with a client certificate, you must first add a MongoDB\nuser that corresponds to the client certificate. See Add x.509 Certificate\nsubject as a User as documented here:\nhttps://docs.mongodb.com/v3.4/tutorial/configure-x509-client-authentication/\n\n    To authenticate, use the db.auth() method in the $external database,\nspecifying \"MONGODB-X509\" for the mechanism field, and the user that\ncorresponds to the client certificate for the user field.\n\n    If the mechanism field is not set to \"MONGODB-X509\", this is a finding.","fix":"Do the following:\n    - Create local CA and signing keys.\n    - Generate and sign server certificates for member authentication.\n    - Generate and sign client certificates for client authentication.\n    - Start MongoDB cluster in non-auth mode.\n    - Set up replica set and initial users.\n    - Restart MongoDB replica set in X.509 mode using server certificates.\n\n    Example shown here for x.509 Authentication:\nhttps://www.mongodb.com/blog/post/secure-mongodb-with-x-509-authentication\n\n    Additionally, SSL/TLS must be on as documented here:\nhttps://docs.mongodb.com/v3.4/tutorial/configure-ssl/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000171-DB-000074","gid":"V-81867","rid":"SV-96581r1_rule","stig_id":"MD3X-00-000330","fix_id":"F-88717r1_fix","cci":["CCI-000196"],"nist":["IA-5 (1) (c)"],"sdlc_stages":["scm"]},"code":"control 'V-81867' do\n  title \"If passwords are used for authentication, MongoDB must store only\nhashed, salted representations of passwords.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, database passwords stored in clear text, using reversible\nencryption, or using unsalted hashes would be vulnerable to unauthorized\ndisclosure. Database passwords must always be in the form of one-way, salted\nhashes when stored internally or externally to MongoDB.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    MongoDB supports x.509 certificate authentication for use with a secure\nTLS/SSL connection.\n\n    The x.509 client authentication allows clients to authenticate to servers\nwith certificates rather than with a username and password.\n\n    If X.509 authentication is not used, a SCRAM-SHA-1 authentication protocol\nis also available. The SCRAM-SHA-1 protocol uses one-way, salted hash functions\nfor passwords as documented here:\nhttps://docs.mongodb.com/v3.4/core/security-scram-sha-1/\n\n    To authenticate with a client certificate, you must first add a MongoDB\nuser that corresponds to the client certificate. See Add x.509 Certificate\nsubject as a User as documented here:\nhttps://docs.mongodb.com/v3.4/tutorial/configure-x509-client-authentication/\n\n    To authenticate, use the db.auth() method in the $external database,\nspecifying \\\"MONGODB-X509\\\" for the mechanism field, and the user that\ncorresponds to the client certificate for the user field.\n\n    If the mechanism field is not set to \\\"MONGODB-X509\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    Do the following:\n    - Create local CA and signing keys.\n    - Generate and sign server certificates for member authentication.\n    - Generate and sign client certificates for client authentication.\n    - Start MongoDB cluster in non-auth mode.\n    - Set up replica set and initial users.\n    - Restart MongoDB replica set in X.509 mode using server certificates.\n\n    Example shown here for x.509 Authentication:\nhttps://www.mongodb.com/blog/post/secure-mongodb-with-x-509-authentication\n\n    Additionally, SSL/TLS must be on as documented here:\nhttps://docs.mongodb.com/v3.4/tutorial/configure-ssl/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000171-DB-000074'\n  tag gid: 'V-81867'\n  tag rid: 'SV-96581r1_rule'\n  tag stig_id: 'MD3X-00-000330'\n  tag fix_id: 'F-88717r1_fix'\n  tag cci: ['CCI-000196']\n  tag nist: ['IA-5 (1) (c)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security authorization)) { should cmp 'enabled' }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security clusterAuthMode)) { should cmp 'x509' }\n  end\nend\n","source_location":{"ref":"controls/V-81867.rb","line":1},"id":"V-81867"},{"title":"Database software, including DBMS configuration files, must be stored\nin dedicated directories, or DASD pools, separate from the host OS and other\napplications.","desc":"When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can potentially have significant effects\non the overall security of the system.\n\n    Multiple applications can provide a cumulative negative effect. A\nvulnerability and subsequent exploit to one application can lead to an exploit\nof other applications sharing the same security context. For example, an\nexploit to a web server process that leads to unauthorized administrative\naccess to host system directories can most likely lead to a compromise of all\napplications hosted by the same system. Database software not installed using\ndedicated directories both threatens and is threatened by other hosted\napplications. Access controls defined for one application may by default\nprovide access to the other application's database objects or directories. Any\nmethod that provides any level of separation of security context assists in the\nprotection between applications.","descriptions":{"default":"When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can potentially have significant effects\non the overall security of the system.\n\n    Multiple applications can provide a cumulative negative effect. A\nvulnerability and subsequent exploit to one application can lead to an exploit\nof other applications sharing the same security context. For example, an\nexploit to a web server process that leads to unauthorized administrative\naccess to host system directories can most likely lead to a compromise of all\napplications hosted by the same system. Database software not installed using\ndedicated directories both threatens and is threatened by other hosted\napplications. Access controls defined for one application may by default\nprovide access to the other application's database objects or directories. Any\nmethod that provides any level of separation of security context assists in the\nprotection between applications.","rationale":"","check":"Review the MongoDB software library directory and note other root\ndirectories located on the same disk directory or any subdirectories.\n\n    If any non-MongoDB software directories exist on the disk directory,\nexamine or investigate their use. If any of the directories are used by other\napplications, including third-party applications that use the MongoDB this is a\nfinding.\n\n    Only applications that are required for the functioning and administration,\nnot use, of the MongoDB should be located in the same disk directory as the\nMongoDB software libraries.\n\n    If other applications are located in the same directory as the MongoDB\ndatabase this is a finding.","fix":"Install all applications on directories separate from the\nMongoDB software library directory. Relocate any directories or reinstall other\napplication software that currently shares the MongoDB software library\ndirectory."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000199","gid":"V-81855","rid":"SV-96569r1_rule","stig_id":"MD3X-00-000260","fix_id":"F-88705r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)"]},"code":"control 'V-81855' do\n  title \"Database software, including DBMS configuration files, must be stored\nin dedicated directories, or DASD pools, separate from the host OS and other\napplications.\"\n  desc  \"When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can potentially have significant effects\non the overall security of the system.\n\n    Multiple applications can provide a cumulative negative effect. A\nvulnerability and subsequent exploit to one application can lead to an exploit\nof other applications sharing the same security context. For example, an\nexploit to a web server process that leads to unauthorized administrative\naccess to host system directories can most likely lead to a compromise of all\napplications hosted by the same system. Database software not installed using\ndedicated directories both threatens and is threatened by other hosted\napplications. Access controls defined for one application may by default\nprovide access to the other application's database objects or directories. Any\nmethod that provides any level of separation of security context assists in the\nprotection between applications.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the MongoDB software library directory and note other root\ndirectories located on the same disk directory or any subdirectories.\n\n    If any non-MongoDB software directories exist on the disk directory,\nexamine or investigate their use. If any of the directories are used by other\napplications, including third-party applications that use the MongoDB this is a\nfinding.\n\n    Only applications that are required for the functioning and administration,\nnot use, of the MongoDB should be located in the same disk directory as the\nMongoDB software libraries.\n\n    If other applications are located in the same directory as the MongoDB\ndatabase this is a finding.\n  \"\n  desc  'fix', \"Install all applications on directories separate from the\nMongoDB software library directory. Relocate any directories or reinstall other\napplication software that currently shares the MongoDB software library\ndirectory.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000133-DB-000199'\n  tag gid: 'V-81855'\n  tag rid: 'SV-96569r1_rule'\n  tag stig_id: 'MD3X-00-000260'\n  tag fix_id: 'F-88705r1_fix'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\n\n  describe 'A manual review is required to ensure all database software, including DBMS configuration files, is stored\n  in dedicated directories, or DASD pools, separate from the host OS and other\n  applications' do\n    skip 'A manual review is required to ensure all database software, including DBMS configuration files, is stored\n  in dedicated directories, or DASD pools, separate from the host OS and other\n  applications'\n  end\nend\n","source_location":{"ref":"controls/V-81855.rb","line":1},"id":"V-81855"},{"title":"MongoDB must prohibit the use of cached authenticators after an\norganization-defined time period.","desc":"If cached authentication information is out-of-date, the validity of\nthe authentication information may be questionable.","descriptions":{"default":"If cached authentication information is out-of-date, the validity of\nthe authentication information may be questionable.","rationale":"","check":"If MongoDB is configured to authenticate using SASL and LDAP/Active\nDirectory check the saslauthd command line options in the system boot script\nthat starts saslauthd (the location will be dependent on the specific Linux\noperating system and boot script layout and naming conventions).\n\n    If the \"-t\" option is not set for the \"saslauthd\" process in the system\nboot script, this is a finding.\n\n    If any mongos process is running (a MongoDB shared cluster) the\n\"userCacheInvalidationIntervalSecs\" option can be used to specify the cache\ntimeout.\n\n    The default is \"30\" seconds and the minimum is \"1\" second.","fix":"If MongoDB is configured to authenticate using SASL and LDAP/Active\nDirectory modify and restart the saslauthd command line options in the system\nboot script and set the \"-t\" option to the appropriate timeout in seconds.\n\n    From the Linux Command line (with root/sudo privs) run the following\ncommand to restart the saslauthd process after making the change for the \"-t\"\nparameter:\n\n    systemctl restart saslauthd\n\n    If any mongos process is running (a MongoDB shared cluster) the\n\"userCacheInvalidationIntervalSecs\" option to adjust the timeout in seconds\ncan be changed from the default \"30\" seconds.\n\n    This is accomplished by modifying the mongos configuration file (default\nlocation: /etc/mongos.conf) and then restarting mongos."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000400-DB-000367","gid":"V-81915","rid":"SV-96629r1_rule","stig_id":"MD3X-00-000710","fix_id":"F-88765r1_fix","cci":["CCI-002007"],"nist":["IA-5 (13)"]},"code":"control 'V-81915' do\n  title \"MongoDB must prohibit the use of cached authenticators after an\norganization-defined time period.\"\n  desc  \"If cached authentication information is out-of-date, the validity of\nthe authentication information may be questionable.\"\n  desc  'rationale', ''\n  desc  'check', \"\n    If MongoDB is configured to authenticate using SASL and LDAP/Active\nDirectory check the saslauthd command line options in the system boot script\nthat starts saslauthd (the location will be dependent on the specific Linux\noperating system and boot script layout and naming conventions).\n\n    If the \\\"-t\\\" option is not set for the \\\"saslauthd\\\" process in the system\nboot script, this is a finding.\n\n    If any mongos process is running (a MongoDB shared cluster) the\n\\\"userCacheInvalidationIntervalSecs\\\" option can be used to specify the cache\ntimeout.\n\n    The default is \\\"30\\\" seconds and the minimum is \\\"1\\\" second.\n  \"\n  desc 'fix', \"\n    If MongoDB is configured to authenticate using SASL and LDAP/Active\nDirectory modify and restart the saslauthd command line options in the system\nboot script and set the \\\"-t\\\" option to the appropriate timeout in seconds.\n\n    From the Linux Command line (with root/sudo privs) run the following\ncommand to restart the saslauthd process after making the change for the \\\"-t\\\"\nparameter:\n\n    systemctl restart saslauthd\n\n    If any mongos process is running (a MongoDB shared cluster) the\n\\\"userCacheInvalidationIntervalSecs\\\" option to adjust the timeout in seconds\ncan be changed from the default \\\"30\\\" seconds.\n\n    This is accomplished by modifying the mongos configuration file (default\nlocation: /etc/mongos.conf) and then restarting mongos.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000400-DB-000367'\n  tag gid: 'V-81915'\n  tag rid: 'SV-96629r1_rule'\n  tag stig_id: 'MD3X-00-000710'\n  tag fix_id: 'F-88765r1_fix'\n  tag cci: ['CCI-002007']\n  tag nist: ['IA-5 (13)']\n\n  describe 'A manual review is required to ensure MongoDB prohibits the use of cached authenticators after an\n  organization-defined time period' do\n    skip 'A manual review is required to ensure MongoDB prohibits the use of cached authenticators after an\n    organization-defined time period'\n  end\nend\n","source_location":{"ref":"controls/V-81915.rb","line":1},"id":"V-81915"},{"title":"MongoDB must prohibit user installation of logic modules (stored\nprocedures, functions, triggers, views, etc.) without explicit privileged\nstatus.","desc":"Allowing regular users to install software, without explicit\nprivileges, creates the risk that untested or potentially malicious software\nwill be installed on the system. Explicit privileges (escalated or\nadministrative privileges) provide the regular user with explicit capabilities\nand control that exceed the rights of a regular user.\n\n    DBMS functionality and the nature and requirements of databases will vary;\nso while users are not permitted to install unapproved software, there may be\ninstances where the organization allows the user to install approved software\npackages such as from an approved software repository. The requirements for\nproduction servers will be more restrictive than those used for development and\nresearch.\n\n    MongoDB must enforce software installation by users based upon what types\nof software installations are permitted (e.g., updates and security patches to\nexisting software) and what types of installations are prohibited (e.g.,\nsoftware whose pedigree with regard to being potentially malicious is unknown\nor suspect) by the organization).\n\n    In the case of a database management system, this requirement covers stored\nprocedures, functions, triggers, views, etc.","descriptions":{"default":"Allowing regular users to install software, without explicit\nprivileges, creates the risk that untested or potentially malicious software\nwill be installed on the system. Explicit privileges (escalated or\nadministrative privileges) provide the regular user with explicit capabilities\nand control that exceed the rights of a regular user.\n\n    DBMS functionality and the nature and requirements of databases will vary;\nso while users are not permitted to install unapproved software, there may be\ninstances where the organization allows the user to install approved software\npackages such as from an approved software repository. The requirements for\nproduction servers will be more restrictive than those used for development and\nresearch.\n\n    MongoDB must enforce software installation by users based upon what types\nof software installations are permitted (e.g., updates and security patches to\nexisting software) and what types of installations are prohibited (e.g.,\nsoftware whose pedigree with regard to being potentially malicious is unknown\nor suspect) by the organization).\n\n    In the case of a database management system, this requirement covers stored\nprocedures, functions, triggers, views, etc.","rationale":"","check":"If MongoDB supports only software development, experimentation, and/or\ndeveloper-level testing (that is, excluding production systems, integration\ntesting, stress testing, and user acceptance testing), this is not a finding.\n\n    Review the MongoDB security settings with respect to non-administrative\nusers' ability to create, alter, or replace functions or views.\n\n    These MongoDB commands can help with showing existing roles and permissions\nof users of the databases.\n\n    db.getRoles( { rolesInfo: 1, showPrivileges:true, showBuiltinRoles: true })\n\n    If any such permissions exist and are not documented and approved, this is\na finding.","fix":"Revoke any roles with unnecessary privileges to privileged functionality by\nexecuting the revoke command.\n\n    Revoke any unnecessary privileges from any roles by executing the revoke\ncommand.\n\n    Create, as needed, new role(s) with associated privileges."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000378-DB-000365","gid":"V-81909","rid":"SV-96623r1_rule","stig_id":"MD3X-00-000650","fix_id":"F-88759r1_fix","cci":["CCI-001812"],"nist":["CM-11 (2)"]},"code":"control 'V-81909' do\n  title \"MongoDB must prohibit user installation of logic modules (stored\nprocedures, functions, triggers, views, etc.) without explicit privileged\nstatus.\"\n  desc  \"Allowing regular users to install software, without explicit\nprivileges, creates the risk that untested or potentially malicious software\nwill be installed on the system. Explicit privileges (escalated or\nadministrative privileges) provide the regular user with explicit capabilities\nand control that exceed the rights of a regular user.\n\n    DBMS functionality and the nature and requirements of databases will vary;\nso while users are not permitted to install unapproved software, there may be\ninstances where the organization allows the user to install approved software\npackages such as from an approved software repository. The requirements for\nproduction servers will be more restrictive than those used for development and\nresearch.\n\n    MongoDB must enforce software installation by users based upon what types\nof software installations are permitted (e.g., updates and security patches to\nexisting software) and what types of installations are prohibited (e.g.,\nsoftware whose pedigree with regard to being potentially malicious is unknown\nor suspect) by the organization).\n\n    In the case of a database management system, this requirement covers stored\nprocedures, functions, triggers, views, etc.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    If MongoDB supports only software development, experimentation, and/or\ndeveloper-level testing (that is, excluding production systems, integration\ntesting, stress testing, and user acceptance testing), this is not a finding.\n\n    Review the MongoDB security settings with respect to non-administrative\nusers' ability to create, alter, or replace functions or views.\n\n    These MongoDB commands can help with showing existing roles and permissions\nof users of the databases.\n\n    db.getRoles( { rolesInfo: 1, showPrivileges:true, showBuiltinRoles: true })\n\n    If any such permissions exist and are not documented and approved, this is\na finding.\n  \"\n  desc 'fix', \"\n    Revoke any roles with unnecessary privileges to privileged functionality by\nexecuting the revoke command.\n\n    Revoke any unnecessary privileges from any roles by executing the revoke\ncommand.\n\n    Create, as needed, new role(s) with associated privileges.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000378-DB-000365'\n  tag gid: 'V-81909'\n  tag rid: 'SV-96623r1_rule'\n  tag stig_id: 'MD3X-00-000650'\n  tag fix_id: 'F-88759r1_fix'\n  tag cci: ['CCI-001812']\n  tag nist: ['CM-11 (2)']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  if dbnames.empty?\n    describe 'There are no mongo databases, therefore for this control is NA' do\n      skip 'There are no mongo databases, therefore for this control is NA'\n    end\n  end\n\n  unless dbnames.empty?\n    dbnames.each do |dbs|\n      users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n      users.each do |t|\n        loc_colon = t.index(':')\n\n        user = t[loc_colon + 3..-1]\n\n        loc_quote = user.index('\"')\n\n        username = user[0, loc_quote]\n\n        getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"}, {roles: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n\n        getdb_roles.each do |r|\n          remove_role = r.index('[')\n          rr = r[remove_role..-1]\n\n          allowed_role = username\n          describe \"The database role for user: #{username}\" do\n            subject { rr }\n            it { should be_in attribute(\"#{allowed_role}_allowed_role\") }\n          end\n        end\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81909.rb","line":1},"id":"V-81909"},{"title":"MongoDB must implement cryptographic mechanisms to prevent\nunauthorized modification of organization-defined information at rest (to\ninclude, at a minimum, PII and classified information) on organization-defined\ninformation system components.","desc":"DBMSs handling data requiring \"data at rest\" protections must employ\ncryptographic mechanisms to prevent unauthorized disclosure and modification of\nthe information at rest. These cryptographic mechanisms may be native to\nMongoDB or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.","descriptions":{"default":"DBMSs handling data requiring \"data at rest\" protections must employ\ncryptographic mechanisms to prevent unauthorized disclosure and modification of\nthe information at rest. These cryptographic mechanisms may be native to\nMongoDB or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.","rationale":"","check":"Review the documentation and/or specification for the organization-defined\ninformation.\n\n    If any data is PII, classified or is deemed by the organization to be\nencrypted at rest, this is a finding.\n\n    Verify the mongod command line contain the following options:\n\n    --enableEncryption\n    --kmipServerName <KMIP Server HostName>\n    --kmipPort <KMIP server port>\n    --kmipServerCAFile ca.pem\n    --kmipClientCertificateFile client.pem\n\n    If these above options are not part of the mongod command line, this is a\nfinding.\n\n    Items in the <> above and starting with kmip* are specific to the KMIP\nappliance and need to be set according to the KMIP appliance configuration.","fix":"Configure MongoDB to use the Encrypted Storage Engine and a KMIP appliance\nas documented here:\n\n    https://docs.mongodb.com/v3.4/core/security-encryption-at-rest/\n    https://docs.mongodb.com/v3.4/tutorial/configure-encryption/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000428-DB-000386","satisfies":["SRG-APP-000428-DB-000386","SRG-APP-000429-DB-000387"],"gid":"V-81919","rid":"SV-96633r1_rule","stig_id":"MD3X-00-000740","fix_id":"F-88769r1_fix","cci":["CCI-002475"],"nist":["SC-28 (1)"],"sdlc_stages":["scm"]},"code":"control 'V-81919' do\n  title \"MongoDB must implement cryptographic mechanisms to prevent\nunauthorized modification of organization-defined information at rest (to\ninclude, at a minimum, PII and classified information) on organization-defined\ninformation system components.\"\n  desc  \"DBMSs handling data requiring \\\"data at rest\\\" protections must employ\ncryptographic mechanisms to prevent unauthorized disclosure and modification of\nthe information at rest. These cryptographic mechanisms may be native to\nMongoDB or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\n    Selection of a cryptographic mechanism is based on the need to protect the\nintegrity of organizational information. The strength of the mechanism is\ncommensurate with the security category and/or classification of the\ninformation. Organizations have the flexibility to either encrypt all\ninformation on storage devices (i.e., full disk encryption) or encrypt specific\ndata structures (e.g., files, records, or fields).\n\n    The decision whether and what to encrypt rests with the data owner and is\nalso influenced by the physical measures taken to secure the equipment and\nmedia on which the information resides.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the documentation and/or specification for the organization-defined\ninformation.\n\n    If any data is PII, classified or is deemed by the organization to be\nencrypted at rest, this is a finding.\n\n    Verify the mongod command line contain the following options:\n\n    --enableEncryption\n    --kmipServerName <KMIP Server HostName>\n    --kmipPort <KMIP server port>\n    --kmipServerCAFile ca.pem\n    --kmipClientCertificateFile client.pem\n\n    If these above options are not part of the mongod command line, this is a\nfinding.\n\n    Items in the <> above and starting with kmip* are specific to the KMIP\nappliance and need to be set according to the KMIP appliance configuration.\n  \"\n  desc 'fix', \"\n    Configure MongoDB to use the Encrypted Storage Engine and a KMIP appliance\nas documented here:\n\n    https://docs.mongodb.com/v3.4/core/security-encryption-at-rest/\n    https://docs.mongodb.com/v3.4/tutorial/configure-encryption/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000428-DB-000386'\n  tag satisfies: %w(SRG-APP-000428-DB-000386 SRG-APP-000429-DB-000387)\n  tag gid: 'V-81919'\n  tag rid: 'SV-96633r1_rule'\n  tag stig_id: 'MD3X-00-000740'\n  tag fix_id: 'F-88769r1_fix'\n  tag cci: ['CCI-002475']\n  tag nist: ['SC-28 (1)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(kmip serverName)) { should_not be_nil }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(kmip port)) { should_not be_nil }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(kmip port)) { should_not be_nil }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(kmip serverCAFile)) { should_not be_nil }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(kmip clientCertificateFile)) { should_not be_nil }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(['enableEncryption']) { should cmp 'true' }\n  end\nend\n","source_location":{"ref":"controls/V-81919.rb","line":1},"id":"V-81919"},{"title":"MongoDB must allocate audit record storage capacity in accordance with\nsite audit record storage requirements.","desc":"In order to ensure sufficient storage capacity for the audit logs,\nMongoDB must be able to allocate audit record storage capacity. Although\nanother requirement (SRG-APP-000515-DB-000318) mandates that audit data be\noff-loaded to a centralized log management system, it remains necessary to\nprovide space on the database server to serve as a buffer against outages and\ncapacity limits of the off-loading mechanism.\n\n    The task of allocating audit record storage capacity is usually performed\nduring initial installation of MongoDB and is closely associated with the DBA\nand system administrator roles. The DBA or system administrator will usually\ncoordinate the allocation of physical drive space with the application\nowner/installer and the application will prompt the installer to provide the\ncapacity information, the physical location of the disk, or both.\n\n    In determining the capacity requirements, consider such factors as: total\nnumber of users; expected number of concurrent users during busy periods;\nnumber and type of events being monitored; types and amounts of data being\ncaptured; the frequency/speed with which audit records are off-loaded to the\ncentral log management system; and any limitations that exist on MongoDB's\nability to reuse the space formerly occupied by off-loaded records.","descriptions":{"default":"In order to ensure sufficient storage capacity for the audit logs,\nMongoDB must be able to allocate audit record storage capacity. Although\nanother requirement (SRG-APP-000515-DB-000318) mandates that audit data be\noff-loaded to a centralized log management system, it remains necessary to\nprovide space on the database server to serve as a buffer against outages and\ncapacity limits of the off-loading mechanism.\n\n    The task of allocating audit record storage capacity is usually performed\nduring initial installation of MongoDB and is closely associated with the DBA\nand system administrator roles. The DBA or system administrator will usually\ncoordinate the allocation of physical drive space with the application\nowner/installer and the application will prompt the installer to provide the\ncapacity information, the physical location of the disk, or both.\n\n    In determining the capacity requirements, consider such factors as: total\nnumber of users; expected number of concurrent users during busy periods;\nnumber and type of events being monitored; types and amounts of data being\ncaptured; the frequency/speed with which audit records are off-loaded to the\ncentral log management system; and any limitations that exist on MongoDB's\nability to reuse the space formerly occupied by off-loaded records.","rationale":"","check":"Investigate whether there have been any incidents where MongoDB ran out of\naudit log space since the last time the space was allocated or other corrective\nmeasures were taken.\n\n    If there have been incidents where MongoDB ran out of audit log space, this\nis a finding.\n\n    A MongoDB audit log that is configured to be stored in a file is identified\nin the MongoDB configuration file (default: /etc/mongod.conf) under the\n\"auditLog:\" key and subkey \"destination:\" where \"destination\" is\n\"file\".\n\n    If this is the case then the \"AuditLog:\" subkey \"path:\" determines\nwhere (device/directory) that file will be located.\n\n    View the mongodb configuration file (default location: /etc/mongod.conf)\nand identify how the \"auditlog.destination\" is configured.\n\n    When the \"auditlog.destination\" is \"file\", this is a finding.","fix":"View the mongodb configuration file (default location: /etc/mongod.conf)\nand view the \"auditlog.path\" to identify the storage volume.\n\n    Allocate sufficient space to the storage volume hosting the file identified\nin the MongoDB configuration \"auditLog.path\" to support audit file peak\ndemand."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000357-DB-000316","gid":"V-81905","rid":"SV-96619r1_rule","stig_id":"MD3X-00-000620","fix_id":"F-88755r3_fix","cci":["CCI-001849"],"nist":["AU-4"],"sdlc_stages":["scm"]},"code":"control 'V-81905' do\n  title \"MongoDB must allocate audit record storage capacity in accordance with\nsite audit record storage requirements.\"\n  desc  \"In order to ensure sufficient storage capacity for the audit logs,\nMongoDB must be able to allocate audit record storage capacity. Although\nanother requirement (SRG-APP-000515-DB-000318) mandates that audit data be\noff-loaded to a centralized log management system, it remains necessary to\nprovide space on the database server to serve as a buffer against outages and\ncapacity limits of the off-loading mechanism.\n\n    The task of allocating audit record storage capacity is usually performed\nduring initial installation of MongoDB and is closely associated with the DBA\nand system administrator roles. The DBA or system administrator will usually\ncoordinate the allocation of physical drive space with the application\nowner/installer and the application will prompt the installer to provide the\ncapacity information, the physical location of the disk, or both.\n\n    In determining the capacity requirements, consider such factors as: total\nnumber of users; expected number of concurrent users during busy periods;\nnumber and type of events being monitored; types and amounts of data being\ncaptured; the frequency/speed with which audit records are off-loaded to the\ncentral log management system; and any limitations that exist on MongoDB's\nability to reuse the space formerly occupied by off-loaded records.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Investigate whether there have been any incidents where MongoDB ran out of\naudit log space since the last time the space was allocated or other corrective\nmeasures were taken.\n\n    If there have been incidents where MongoDB ran out of audit log space, this\nis a finding.\n\n    A MongoDB audit log that is configured to be stored in a file is identified\nin the MongoDB configuration file (default: /etc/mongod.conf) under the\n\\\"auditLog:\\\" key and subkey \\\"destination:\\\" where \\\"destination\\\" is\n\\\"file\\\".\n\n    If this is the case then the \\\"AuditLog:\\\" subkey \\\"path:\\\" determines\nwhere (device/directory) that file will be located.\n\n    View the mongodb configuration file (default location: /etc/mongod.conf)\nand identify how the \\\"auditlog.destination\\\" is configured.\n\n    When the \\\"auditlog.destination\\\" is \\\"file\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    View the mongodb configuration file (default location: /etc/mongod.conf)\nand view the \\\"auditlog.path\\\" to identify the storage volume.\n\n    Allocate sufficient space to the storage volume hosting the file identified\nin the MongoDB configuration \\\"auditLog.path\\\" to support audit file peak\ndemand.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000357-DB-000316'\n  tag gid: 'V-81905'\n  tag rid: 'SV-96619r1_rule'\n  tag stig_id: 'MD3X-00-000620'\n  tag fix_id: 'F-88755r3_fix'\n  tag cci: ['CCI-001849']\n  tag nist: ['AU-4']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog destination)) { should_not cmp 'file' }\n  end\nend\n","source_location":{"ref":"controls/V-81905.rb","line":1},"id":"V-81905"},{"title":"MongoDB software installation account must be restricted to authorized\nusers.","desc":"When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can have significant effects on the\noverall security of the system.\n\n    If the system were to allow any user to make changes to software libraries,\nthen those changes might be implemented without undergoing the appropriate\ntesting and approvals that are part of a robust change management process.\n\n    Accordingly, only qualified and authorized individuals must be allowed\naccess to information system components for purposes of initiating changes,\nincluding upgrades and modifications.\n\n    DBA and other privileged administrative or application owner accounts are\ngranted privileges that allow actions that can have a great impact on database\nsecurity and operation. It is especially important to grant privileged access\nto only those persons who are qualified and authorized to use them.","descriptions":{"default":"When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can have significant effects on the\noverall security of the system.\n\n    If the system were to allow any user to make changes to software libraries,\nthen those changes might be implemented without undergoing the appropriate\ntesting and approvals that are part of a robust change management process.\n\n    Accordingly, only qualified and authorized individuals must be allowed\naccess to information system components for purposes of initiating changes,\nincluding upgrades and modifications.\n\n    DBA and other privileged administrative or application owner accounts are\ngranted privileges that allow actions that can have a great impact on database\nsecurity and operation. It is especially important to grant privileged access\nto only those persons who are qualified and authorized to use them.","rationale":"","check":"Review procedures for controlling, granting access to, and tracking use of\nthe DBMS software installation account.\n\n    If access or use of this account is not restricted to the minimum number of\npersonnel required or if unauthorized access to the account has been granted,\nthis is a finding.","fix":"Develop, document, and implement procedures to restrict and\ntrack use of the DBMS software installation account."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000133-DB-000198","gid":"V-81853","rid":"SV-96567r1_rule","stig_id":"MD3X-00-000250","fix_id":"F-88703r1_fix","cci":["CCI-001499"],"nist":["CM-5 (6)"]},"code":"control 'V-81853' do\n  title \"MongoDB software installation account must be restricted to authorized\nusers.\"\n  desc  \"When dealing with change control issues, it should be noted any\nchanges to the hardware, software, and/or firmware components of the\ninformation system and/or application can have significant effects on the\noverall security of the system.\n\n    If the system were to allow any user to make changes to software libraries,\nthen those changes might be implemented without undergoing the appropriate\ntesting and approvals that are part of a robust change management process.\n\n    Accordingly, only qualified and authorized individuals must be allowed\naccess to information system components for purposes of initiating changes,\nincluding upgrades and modifications.\n\n    DBA and other privileged administrative or application owner accounts are\ngranted privileges that allow actions that can have a great impact on database\nsecurity and operation. It is especially important to grant privileged access\nto only those persons who are qualified and authorized to use them.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review procedures for controlling, granting access to, and tracking use of\nthe DBMS software installation account.\n\n    If access or use of this account is not restricted to the minimum number of\npersonnel required or if unauthorized access to the account has been granted,\nthis is a finding.\n  \"\n  desc 'fix', \"Develop, document, and implement procedures to restrict and\ntrack use of the DBMS software installation account.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000133-DB-000198'\n  tag gid: 'V-81853'\n  tag rid: 'SV-96567r1_rule'\n  tag stig_id: 'MD3X-00-000250'\n  tag fix_id: 'F-88703r1_fix'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\n\n  describe 'A manual review is required to ensure there are procedures in place to restrict and track the use of the DBMS software installation account' do\n    skip 'A manual review is required to ensure there are procedures in place to restrict and track the use of the DBMS software installation account'\n  end\nend\n","source_location":{"ref":"controls/V-81853.rb","line":1},"id":"V-81853"},{"title":"MongoDB must uniquely identify and authenticate organizational users\n(or processes acting on behalf of organizational users).","desc":"To assure accountability and prevent unauthenticated access,\norganizational users must be identified and authenticated to prevent potential\nmisuse and compromise of the system.\n\n    Organizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be\nuniquely identified and authenticated for all accesses, except the following:\n\n    (i) Accesses explicitly identified and documented by the organization.\nOrganizations document specific user actions that can be performed on the\ninformation system without identification or authentication; and\n    (ii) Accesses that occur through authorized use of group authenticators\nwithout individual authentication. Organizations may require unique\nidentification of individuals using shared accounts, for detailed\naccountability of individual activity.","descriptions":{"default":"To assure accountability and prevent unauthenticated access,\norganizational users must be identified and authenticated to prevent potential\nmisuse and compromise of the system.\n\n    Organizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be\nuniquely identified and authenticated for all accesses, except the following:\n\n    (i) Accesses explicitly identified and documented by the organization.\nOrganizations document specific user actions that can be performed on the\ninformation system without identification or authentication; and\n    (ii) Accesses that occur through authorized use of group authenticators\nwithout individual authentication. Organizations may require unique\nidentification of individuals using shared accounts, for detailed\naccountability of individual activity.","rationale":"","check":"To view another user’s information, you must have the \"viewUser\" action\non the other user’s database.\n\n    For each database in the system, run the following command:\n\n    db.getUsers()\n\n    Ensure each user identified is a member of an appropriate organization that\ncan access the database.\n\n    If a user is found not be a member or an appropriate organization that can\naccess the database, this is a finding.\n\n    Verify that the MongoDB configuration file (default location:\n/etc/mongod.conf) contains the following:\n\n    security:\n    authorization: \"enabled\"\n\n    If this parameter is not present, this is a finding.","fix":"Prereq: To drop a user from a database, must have the \"dropUser\" action\non the database.\n\n    For any user not a member of an appropriate organization and has access to\na database in the system run the following command:\n\n    // Change to the appropriate database\n    use <database>\n    db.dropUser(<username>, {w: \"majority\", wtimeout: 5000}\n\n    If the MongoDB configuration file (default location: /etc/mongod.conf) does\nnot contain\n\n    security: authorization: \"enabled\"\n\n    Edit the MongoDB configuration file, add these parameters, stop/start\n(restart) any mongod or mongos process using this MongoDB configuration file."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000148-DB-000103","gid":"V-81863","rid":"SV-96577r1_rule","stig_id":"MD3X-00-000310","fix_id":"F-88713r1_fix","cci":["CCI-000764"],"nist":["IA-2"]},"code":"control 'V-81863' do\n  title \"MongoDB must uniquely identify and authenticate organizational users\n(or processes acting on behalf of organizational users).\"\n  desc  \"To assure accountability and prevent unauthenticated access,\norganizational users must be identified and authenticated to prevent potential\nmisuse and compromise of the system.\n\n    Organizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be\nuniquely identified and authenticated for all accesses, except the following:\n\n    (i) Accesses explicitly identified and documented by the organization.\nOrganizations document specific user actions that can be performed on the\ninformation system without identification or authentication; and\n    (ii) Accesses that occur through authorized use of group authenticators\nwithout individual authentication. Organizations may require unique\nidentification of individuals using shared accounts, for detailed\naccountability of individual activity.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    To view another user’s information, you must have the \\\"viewUser\\\" action\non the other user’s database.\n\n    For each database in the system, run the following command:\n\n    db.getUsers()\n\n    Ensure each user identified is a member of an appropriate organization that\ncan access the database.\n\n    If a user is found not be a member or an appropriate organization that can\naccess the database, this is a finding.\n\n    Verify that the MongoDB configuration file (default location:\n/etc/mongod.conf) contains the following:\n\n    security:\n    authorization: \\\"enabled\\\"\n\n    If this parameter is not present, this is a finding.\n  \"\n  desc 'fix', \"\n    Prereq: To drop a user from a database, must have the \\\"dropUser\\\" action\non the database.\n\n    For any user not a member of an appropriate organization and has access to\na database in the system run the following command:\n\n    // Change to the appropriate database\n    use <database>\n    db.dropUser(<username>, {w: \\\"majority\\\", wtimeout: 5000}\n\n    If the MongoDB configuration file (default location: /etc/mongod.conf) does\nnot contain\n\n    security: authorization: \\\"enabled\\\"\n\n    Edit the MongoDB configuration file, add these parameters, stop/start\n(restart) any mongod or mongos process using this MongoDB configuration file.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000148-DB-000103'\n  tag gid: 'V-81863'\n  tag rid: 'SV-96577r1_rule'\n  tag stig_id: 'MD3X-00-000310'\n  tag fix_id: 'F-88713r1_fix'\n  tag cci: ['CCI-000764']\n  tag nist: ['IA-2']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  dbnames.each do |dbs|\n    users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n    users.each do |t|\n      loc_colon = t.index(':')\n\n      user = t[loc_colon + 3..-1]\n\n      loc_quote = user.index('\"')\n\n      username = user[0, loc_quote]\n      allowed_db = dbs\n      describe \"Database users of database: #{dbs}\" do\n        subject { username }\n        it { should be_in attribute(\"#{allowed_db}_db_users\") }\n      end\n    end\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security authorization)) { should cmp 'enabled' }\n  end\nend\n","source_location":{"ref":"controls/V-81863.rb","line":1},"id":"V-81863"},{"title":"MongoDB must use NIST FIPS 140-2-validated cryptographic modules for\ncryptographic operations.","desc":"Use of weak or not validated cryptographic algorithms undermines the\npurposes of utilizing encryption and digital signatures to protect data. Weak\nalgorithms can be easily broken and not validated cryptographic modules may not\nimplement algorithms correctly. Unapproved cryptographic modules or algorithms\nshould not be relied on for authentication, confidentiality, or integrity. Weak\ncryptography could allow an attacker to gain access to and modify data stored\nin the database as well as the administration settings of MongoDB.\n\n    Applications, including DBMSs, utilizing cryptography are required to use\napproved NIST FIPS 140-2-validated cryptographic modules that meet the\nrequirements of applicable federal laws, Executive Orders, directives,\npolicies, regulations, standards, and guidance.\n\n    The security functions validated as part of FIPS 140-2 for cryptographic\nmodules are described in FIPS 140-2 Annex A.\n\n    NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\nencryption modules.","descriptions":{"default":"Use of weak or not validated cryptographic algorithms undermines the\npurposes of utilizing encryption and digital signatures to protect data. Weak\nalgorithms can be easily broken and not validated cryptographic modules may not\nimplement algorithms correctly. Unapproved cryptographic modules or algorithms\nshould not be relied on for authentication, confidentiality, or integrity. Weak\ncryptography could allow an attacker to gain access to and modify data stored\nin the database as well as the administration settings of MongoDB.\n\n    Applications, including DBMSs, utilizing cryptography are required to use\napproved NIST FIPS 140-2-validated cryptographic modules that meet the\nrequirements of applicable federal laws, Executive Orders, directives,\npolicies, regulations, standards, and guidance.\n\n    The security functions validated as part of FIPS 140-2 for cryptographic\nmodules are described in FIPS 140-2 Annex A.\n\n    NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\nencryption modules.","rationale":"","check":"If MongoDB is deployed in a classified environment:\n\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf), search for and review the following parameters:\n\n    net:\n    ssl:\n    FIPSMode: true\n\n    If this parameter is not present in the configuration file, this is a\nfinding.\n\n    If \"FIPSMode\" is set to \"false\", this is a finding.\n\n    Check the server log file for a message that FIPS is active:\n    Search the log for the following text \"\"FIPS 140-2 mode activated\"\".\n\n    If this text is not found, this is a finding.\n\n    Verify that FIPS has been enabled at the operating system. The following\nwill return \"1\" if FIPS is enabled:\n    cat /proc/sys/crypto/fips_enabled\n\n    If the above command does not return \"1\", this is a finding.","fix":"Enable FIPS 140-2 mode for MongoDB Enterprise.\n\n    Edit the MongoDB database configuration file (default location:\n/etc/mongod.conf) to contain the following parameter setting:\n\n    net:\n    ssl:\n    FIPSMode: true\n\n    Stop/start (restart) the mongod or mongos instance using this configuration.\n\n    For the operating system finding, please refer to the appropriate operating\nsystem documentation for the procedure to install, configure, and test FIPS\nmode."},"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000179-DB-000114","satisfies":["SRG-APP-000179-DB-000114","SRG-APP-000514-DB-000381","SRG-APP-000514-DB-000382","SRG-APP-000514-DB-000383","SRG-APP-000416-DB-000380"],"gid":"V-81875","rid":"SV-96589r1_rule","stig_id":"MD3X-00-000380","fix_id":"F-88725r1_fix","cci":["CCI-000803","CCI-002450"],"nist":["IA-7","SC-13"],"sdlc_stages":["scm"]},"code":"control 'V-81875' do\n  title \"MongoDB must use NIST FIPS 140-2-validated cryptographic modules for\ncryptographic operations.\"\n  desc  \"Use of weak or not validated cryptographic algorithms undermines the\npurposes of utilizing encryption and digital signatures to protect data. Weak\nalgorithms can be easily broken and not validated cryptographic modules may not\nimplement algorithms correctly. Unapproved cryptographic modules or algorithms\nshould not be relied on for authentication, confidentiality, or integrity. Weak\ncryptography could allow an attacker to gain access to and modify data stored\nin the database as well as the administration settings of MongoDB.\n\n    Applications, including DBMSs, utilizing cryptography are required to use\napproved NIST FIPS 140-2-validated cryptographic modules that meet the\nrequirements of applicable federal laws, Executive Orders, directives,\npolicies, regulations, standards, and guidance.\n\n    The security functions validated as part of FIPS 140-2 for cryptographic\nmodules are described in FIPS 140-2 Annex A.\n\n    NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\nencryption modules.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    If MongoDB is deployed in a classified environment:\n\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf), search for and review the following parameters:\n\n    net:\n    ssl:\n    FIPSMode: true\n\n    If this parameter is not present in the configuration file, this is a\nfinding.\n\n    If \\\"FIPSMode\\\" is set to \\\"false\\\", this is a finding.\n\n    Check the server log file for a message that FIPS is active:\n    Search the log for the following text \\\"\\\"FIPS 140-2 mode activated\\\"\\\".\n\n    If this text is not found, this is a finding.\n\n    Verify that FIPS has been enabled at the operating system. The following\nwill return \\\"1\\\" if FIPS is enabled:\n    cat /proc/sys/crypto/fips_enabled\n\n    If the above command does not return \\\"1\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    Enable FIPS 140-2 mode for MongoDB Enterprise.\n\n    Edit the MongoDB database configuration file (default location:\n/etc/mongod.conf) to contain the following parameter setting:\n\n    net:\n    ssl:\n    FIPSMode: true\n\n    Stop/start (restart) the mongod or mongos instance using this configuration.\n\n    For the operating system finding, please refer to the appropriate operating\nsystem documentation for the procedure to install, configure, and test FIPS\nmode.\n  \"\n  impact 0.7\n  tag severity: 'high'\n  tag gtitle: 'SRG-APP-000179-DB-000114'\n  tag satisfies: %w(SRG-APP-000179-DB-000114 SRG-APP-000514-DB-000381\nSRG-APP-000514-DB-000382 SRG-APP-000514-DB-000383\nSRG-APP-000416-DB-000380)\n  tag gid: 'V-81875'\n  tag rid: 'SV-96589r1_rule'\n  tag stig_id: 'MD3X-00-000380'\n  tag fix_id: 'F-88725r1_fix'\n  tag cci: %w(CCI-000803 CCI-002450)\n  tag nist: %w(IA-7 SC-13)\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl FIPSMode)) { should cmp 'true' }\n  end\nend\n","source_location":{"ref":"controls/V-81875.rb","line":1},"id":"V-81875"},{"title":"MongoDB must utilize centralized management of the content captured in\naudit records generated by all components of MongoDB.","desc":"Without the ability to centrally manage the content captured in the\naudit records, identification, troubleshooting, and correlation of suspicious\nbehavior would be difficult and could lead to a delayed or incomplete analysis\nof an ongoing attack.\n\n    The content captured in audit records must be managed from a central\nlocation (necessitating automation). Centralized management of audit records\nand logs provides for efficiency in maintenance and management of records, as\nwell as the backup and archiving of those records.\n\n    MongoDB may write audit records to database tables, to files in the file\nsystem, to other kinds of local repository, or directly to a centralized log\nmanagement system. Whatever the method used, it must be compatible with\noff-loading the records to the centralized system.","descriptions":{"default":"Without the ability to centrally manage the content captured in the\naudit records, identification, troubleshooting, and correlation of suspicious\nbehavior would be difficult and could lead to a delayed or incomplete analysis\nof an ongoing attack.\n\n    The content captured in audit records must be managed from a central\nlocation (necessitating automation). Centralized management of audit records\nand logs provides for efficiency in maintenance and management of records, as\nwell as the backup and archiving of those records.\n\n    MongoDB may write audit records to database tables, to files in the file\nsystem, to other kinds of local repository, or directly to a centralized log\nmanagement system. Whatever the method used, it must be compatible with\noff-loading the records to the centralized system.","rationale":"","check":"MongoDB can be configured to write audit events to the syslog in Linux, but\nthis is not available in Windows. Audit events can also be written to a file in\neither JSON on BSON format. Through the use of third-party tools or via syslog\ndirectly, audit records can be pushed to a centralized log management system.\n\n    If a centralized tool for log management is not installed and configured to\ncollect audit logs or syslogs, this is a finding.","fix":"Install a centralized syslog collecting tool and configured it as\ninstructed in its documentation.\n\n    To enable auditing and print audit events to the syslog in JSON format,\nspecify the syslog for the --auditDestination setting:\n    mongod --dbpath data/db --auditDestination syslog\n\n    Alternatively, these options can also be specified in the configuration\nfile:\n    storage:\n    dbPath: data/db\n    auditLog:\n    destination: syslog"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000356-DB-000314","gid":"V-81903","rid":"SV-96617r1_rule","stig_id":"MD3X-00-000600","fix_id":"F-88753r1_fix","cci":["CCI-001844"],"nist":["AU-3 (2)"],"sdlc_stages":["scm"]},"code":"control 'V-81903' do\n  title \"MongoDB must utilize centralized management of the content captured in\naudit records generated by all components of MongoDB.\"\n  desc  \"Without the ability to centrally manage the content captured in the\naudit records, identification, troubleshooting, and correlation of suspicious\nbehavior would be difficult and could lead to a delayed or incomplete analysis\nof an ongoing attack.\n\n    The content captured in audit records must be managed from a central\nlocation (necessitating automation). Centralized management of audit records\nand logs provides for efficiency in maintenance and management of records, as\nwell as the backup and archiving of those records.\n\n    MongoDB may write audit records to database tables, to files in the file\nsystem, to other kinds of local repository, or directly to a centralized log\nmanagement system. Whatever the method used, it must be compatible with\noff-loading the records to the centralized system.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    MongoDB can be configured to write audit events to the syslog in Linux, but\nthis is not available in Windows. Audit events can also be written to a file in\neither JSON on BSON format. Through the use of third-party tools or via syslog\ndirectly, audit records can be pushed to a centralized log management system.\n\n    If a centralized tool for log management is not installed and configured to\ncollect audit logs or syslogs, this is a finding.\n  \"\n  desc 'fix', \"\n    Install a centralized syslog collecting tool and configured it as\ninstructed in its documentation.\n\n    To enable auditing and print audit events to the syslog in JSON format,\nspecify the syslog for the --auditDestination setting:\n    mongod --dbpath data/db --auditDestination syslog\n\n    Alternatively, these options can also be specified in the configuration\nfile:\n    storage:\n    dbPath: data/db\n    auditLog:\n    destination: syslog\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000356-DB-000314'\n  tag gid: 'V-81903'\n  tag rid: 'SV-96617r1_rule'\n  tag stig_id: 'MD3X-00-000600'\n  tag fix_id: 'F-88753r1_fix'\n  tag cci: ['CCI-001844']\n  tag nist: ['AU-3 (2)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(storage dbPath)) { should cmp 'data/db' }\n  end\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(auditLog destination)) { should cmp 'syslog' }\n  end\nend\n","source_location":{"ref":"controls/V-81903.rb","line":1},"id":"V-81903"},{"title":"MongoDB must enforce authorized access to all PKI private keys\nstored/utilized by MongoDB.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\nPKI certificate-based authentication is performed by requiring the certificate\nholder to cryptographically prove possession of the corresponding private key.\n\n    If the private key is stolen, an attacker can use the private key(s) to\nimpersonate the certificate holder. In cases where MongoDB-stored private keys\nare used to authenticate MongoDB to the system’s clients, loss of the\ncorresponding private keys would allow an attacker to successfully perform\nundetected man in the middle attacks against MongoDB system and its clients.\n\n    Both the holder of a digital certificate and the issuing authority must\ntake careful measures to protect the corresponding private key. Private keys\nshould always be generated and protected in FIPS 140-2 validated cryptographic\nmodules.\n\n    All access to the private key(s) of MongoDB must be restricted to\nauthorized and authenticated users. If unauthorized users have access to one or\nmore of MongoDB's private keys, an attacker could gain access to the key(s) and\nuse them to impersonate the database on the network or otherwise perform\nunauthorized actions.","descriptions":{"default":"The DoD standard for authentication is DoD-approved PKI certificates.\nPKI certificate-based authentication is performed by requiring the certificate\nholder to cryptographically prove possession of the corresponding private key.\n\n    If the private key is stolen, an attacker can use the private key(s) to\nimpersonate the certificate holder. In cases where MongoDB-stored private keys\nare used to authenticate MongoDB to the system’s clients, loss of the\ncorresponding private keys would allow an attacker to successfully perform\nundetected man in the middle attacks against MongoDB system and its clients.\n\n    Both the holder of a digital certificate and the issuing authority must\ntake careful measures to protect the corresponding private key. Private keys\nshould always be generated and protected in FIPS 140-2 validated cryptographic\nmodules.\n\n    All access to the private key(s) of MongoDB must be restricted to\nauthorized and authenticated users. If unauthorized users have access to one or\nmore of MongoDB's private keys, an attacker could gain access to the key(s) and\nuse them to impersonate the database on the network or otherwise perform\nunauthorized actions.","rationale":"","check":"In the MongoDB database configuration file (default location:\n/etc/mongod.conf), review the following parameters:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/mongodbca.pem\n\n    Verify ownership, group ownership, and permissions on the file given for\nPEMKeyFile (default 'mongodb.pem').\n\n    Run following command and review its output:\n    ls -al /etc/mongod.conf\n\n    typical output:\n    -rw------- 1 mongodb mongodb 566 Apr 26 20:20 /etc/mongod.conf\n\n    If the user owner is not \"mongodb\", this is a finding.\n\n    If the group owner is not \"mongodb\", this is a finding.\n\n    If the file is more permissive than \"600\", this is a finding.\n\n    Verify ownership, group ownership, and permissions on the file given for\nCAFile (default 'ca.pem').\n\n    If the user owner is not \"mongodb\", this is a finding.\n\n    If the group owner is not \"mongodb\", this is a finding.\n\n    IF the file is more permissive than \"600\", this is a finding.","fix":"Run these commands:\n\"chown mongodb:mongodb /etc/ssl/mongodb.pem\"\n\"chmod 600 /etc/ssl/mongodb.pem\"\n\"chown mongodb:mongodb /etc/ssl/mongodbca.pem\"\n\"chmod 600 /etc/ssl/mongodbca.pem\""},"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000176-DB-000068","gid":"V-81871","rid":"SV-96585r1_rule","stig_id":"MD3X-00-000360","fix_id":"F-88721r1_fix","cci":["CCI-000186"],"nist":["IA-5 (2) (b)"]},"code":"control 'V-81871' do\n  title \"MongoDB must enforce authorized access to all PKI private keys\nstored/utilized by MongoDB.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\nPKI certificate-based authentication is performed by requiring the certificate\nholder to cryptographically prove possession of the corresponding private key.\n\n    If the private key is stolen, an attacker can use the private key(s) to\nimpersonate the certificate holder. In cases where MongoDB-stored private keys\nare used to authenticate MongoDB to the system’s clients, loss of the\ncorresponding private keys would allow an attacker to successfully perform\nundetected man in the middle attacks against MongoDB system and its clients.\n\n    Both the holder of a digital certificate and the issuing authority must\ntake careful measures to protect the corresponding private key. Private keys\nshould always be generated and protected in FIPS 140-2 validated cryptographic\nmodules.\n\n    All access to the private key(s) of MongoDB must be restricted to\nauthorized and authenticated users. If unauthorized users have access to one or\nmore of MongoDB's private keys, an attacker could gain access to the key(s) and\nuse them to impersonate the database on the network or otherwise perform\nunauthorized actions.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf), review the following parameters:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/mongodbca.pem\n\n    Verify ownership, group ownership, and permissions on the file given for\nPEMKeyFile (default 'mongodb.pem').\n\n    Run following command and review its output:\n    ls -al /etc/mongod.conf\n\n    typical output:\n    -rw------- 1 mongodb mongodb 566 Apr 26 20:20 /etc/mongod.conf\n\n    If the user owner is not \\\"mongodb\\\", this is a finding.\n\n    If the group owner is not \\\"mongodb\\\", this is a finding.\n\n    If the file is more permissive than \\\"600\\\", this is a finding.\n\n    Verify ownership, group ownership, and permissions on the file given for\nCAFile (default 'ca.pem').\n\n    If the user owner is not \\\"mongodb\\\", this is a finding.\n\n    If the group owner is not \\\"mongodb\\\", this is a finding.\n\n    IF the file is more permissive than \\\"600\\\", this is a finding.\n  \"\n  desc  'fix', \"\n    Run these commands:\n    \\\"chown mongodb:mongodb /etc/ssl/mongodb.pem\\\"\n    \\\"chmod 600 /etc/ssl/mongodb.pem\\\"\n    \\\"chown mongodb:mongodb /etc/ssl/mongodbca.pem\\\"\n    \\\"chmod 600 /etc/ssl/mongodbca.pem\\\"\n  \"\n  impact 0.7\n  tag severity: 'high'\n  tag gtitle: 'SRG-APP-000176-DB-000068'\n  tag gid: 'V-81871'\n  tag rid: 'SV-96585r1_rule'\n  tag stig_id: 'MD3X-00-000360'\n  tag fix_id: 'F-88721r1_fix'\n  tag cci: ['CCI-000186']\n  tag nist: ['IA-5 (2) (b)']\n\n  describe file('/etc/ssl/mongodb.pem') do\n    its('mode') { should cmp <= 0600 }\n    its('owner') { should eq 'mongod' }\n    its('group') { should eq 'mongod' }\n  end\n\n  describe file('/etc/ssl/mongodbca.pem') do\n    its('mode') { should cmp <= 0600 }\n    its('owner') { should eq 'mongod' }\n    its('group') { should eq 'mongod' }\n  end\nend\n","source_location":{"ref":"controls/V-81871.rb","line":1},"id":"V-81871"},{"title":"MongoDB must provide non-privileged users with error messages that\nprovide information necessary for corrective actions without revealing\ninformation that could be exploited by adversaries.","desc":"Any DBMS or associated application providing too much information in\nerror messages on the screen or printout risks compromising the data and\nsecurity of the system. The structure and content of error messages need to be\ncarefully considered by the organization and development team.\n\n    Databases can inadvertently provide a wealth of information to an attacker\nthrough improperly handled error messages. In addition to sensitive business or\npersonal information, database errors can provide host names, IP addresses,\nuser names, and other system information not required for troubleshooting but\nvery useful to someone targeting the system.\n\n    Carefully consider the structure/content of error messages. The extent to\nwhich information systems are able to identify and handle error conditions is\nguided by organizational policy and operational requirements. Information that\ncould be exploited by adversaries includes, for example, logon attempts with\npasswords entered by mistake as the username, mission/business information that\ncan be derived from (if not stated explicitly by) information recorded, and\npersonal information, such as account numbers, social security numbers, and\ncredit card numbers.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","descriptions":{"default":"Any DBMS or associated application providing too much information in\nerror messages on the screen or printout risks compromising the data and\nsecurity of the system. The structure and content of error messages need to be\ncarefully considered by the organization and development team.\n\n    Databases can inadvertently provide a wealth of information to an attacker\nthrough improperly handled error messages. In addition to sensitive business or\npersonal information, database errors can provide host names, IP addresses,\nuser names, and other system information not required for troubleshooting but\nvery useful to someone targeting the system.\n\n    Carefully consider the structure/content of error messages. The extent to\nwhich information systems are able to identify and handle error conditions is\nguided by organizational policy and operational requirements. Information that\ncould be exploited by adversaries includes, for example, logon attempts with\npasswords entered by mistake as the username, mission/business information that\ncan be derived from (if not stated explicitly by) information recorded, and\npersonal information, such as account numbers, social security numbers, and\ncredit card numbers.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","rationale":"","check":"Check custom database code to verify that error messages do not contain\ninformation beyond what is needed for troubleshooting the issue.\n\n    If custom database errors contain PII data, sensitive business data, or\ninformation useful for identifying the host system or database structure, this\nis a finding.\n\n    When attempting to login with incorrect credentials, the user will receive\nan error message that the operation was unauthorized.\n\n    If a user is attempting to perform an operation for which they do not have\nprivileges, the database will return an error message that the operation is not\nauthorized.","fix":"Configure custom database code and associated application code\nnot to divulge sensitive information or information useful for system\nidentification in error messages."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000266-DB-000162","gid":"V-81893","rid":"SV-96607r1_rule","stig_id":"MD3X-00-000520","fix_id":"F-88743r1_fix","cci":["CCI-001312"],"nist":["SI-11 a"]},"code":"control 'V-81893' do\n  title \"MongoDB must provide non-privileged users with error messages that\nprovide information necessary for corrective actions without revealing\ninformation that could be exploited by adversaries.\"\n  desc  \"Any DBMS or associated application providing too much information in\nerror messages on the screen or printout risks compromising the data and\nsecurity of the system. The structure and content of error messages need to be\ncarefully considered by the organization and development team.\n\n    Databases can inadvertently provide a wealth of information to an attacker\nthrough improperly handled error messages. In addition to sensitive business or\npersonal information, database errors can provide host names, IP addresses,\nuser names, and other system information not required for troubleshooting but\nvery useful to someone targeting the system.\n\n    Carefully consider the structure/content of error messages. The extent to\nwhich information systems are able to identify and handle error conditions is\nguided by organizational policy and operational requirements. Information that\ncould be exploited by adversaries includes, for example, logon attempts with\npasswords entered by mistake as the username, mission/business information that\ncan be derived from (if not stated explicitly by) information recorded, and\npersonal information, such as account numbers, social security numbers, and\ncredit card numbers.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Check custom database code to verify that error messages do not contain\ninformation beyond what is needed for troubleshooting the issue.\n\n    If custom database errors contain PII data, sensitive business data, or\ninformation useful for identifying the host system or database structure, this\nis a finding.\n\n    When attempting to login with incorrect credentials, the user will receive\nan error message that the operation was unauthorized.\n\n    If a user is attempting to perform an operation for which they do not have\nprivileges, the database will return an error message that the operation is not\nauthorized.\n  \"\n  desc 'fix', \"Configure custom database code and associated application code\nnot to divulge sensitive information or information useful for system\nidentification in error messages.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000266-DB-000162'\n  tag gid: 'V-81893'\n  tag rid: 'SV-96607r1_rule'\n  tag stig_id: 'MD3X-00-000520'\n  tag fix_id: 'F-88743r1_fix'\n  tag cci: ['CCI-001312']\n  tag nist: ['SI-11 a']\n\n  describe 'A manual review is required to ensure MongoDB provides non-privileged users with error messages that\n  provide information necessary for corrective actions without revealing\n  information that could be exploited by adversaries.' do\n    skip 'A manual review is required to ensure MongoDB provides non-privileged users with error messages that\n  provide information necessary for corrective actions without revealing\n  information that could be exploited by adversaries.'\n  end\nend\n","source_location":{"ref":"controls/V-81893.rb","line":1},"id":"V-81893"},{"title":"MongoDB must maintain the confidentiality and integrity of information\nduring reception.","desc":"Information can be either unintentionally or maliciously disclosed or\nmodified during reception, including, for example, during aggregation, at\nprotocol transformation points, and during packing/unpacking. These\nunauthorized disclosures or modifications compromise the confidentiality or\nintegrity of the information.\n\n    This requirement applies only to those applications that are either\ndistributed or can allow access to data nonlocally. Use of this requirement\nwill be limited to situations where the data owner has a strict requirement for\nensuring data integrity and confidentiality is maintained at every step of the\ndata transfer and handling process.\n\n    When receiving data, MongoDB, associated applications, and infrastructure\nmust leverage protection mechanisms.","descriptions":{"default":"Information can be either unintentionally or maliciously disclosed or\nmodified during reception, including, for example, during aggregation, at\nprotocol transformation points, and during packing/unpacking. These\nunauthorized disclosures or modifications compromise the confidentiality or\nintegrity of the information.\n\n    This requirement applies only to those applications that are either\ndistributed or can allow access to data nonlocally. Use of this requirement\nwill be limited to situations where the data owner has a strict requirement for\nensuring data integrity and confidentiality is maintained at every step of the\ndata transfer and handling process.\n\n    When receiving data, MongoDB, associated applications, and infrastructure\nmust leverage protection mechanisms.","rationale":"","check":"If the data owner does not have a strict requirement for ensuring data\nintegrity and confidentiality is maintained at every step of the data transfer\nand handling process, this is not a finding.\n\n    If such strict requirement for ensure data integrity and confidentially is\npresent, inspect the MongoDB configuration file (default location:\n/etc/mongod.conf) for the following entries:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    If net.ssl.mode is not set to \"requireSSL\", this is a finding.","fix":"Obtain a certificate from a valid DoD certificate authority to be used for\nencrypted data transmission.\n\n    Modify the MongoDB configuration file (default location: /etc/mongod.conf)\nwith the network configuration options.\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    Set \"net.ssl.mode\" to the \"requireSSL\".\n    Set \"net.ssl.KeyFile\" to the full path of the certificate (.pem) file.\n\n    Start/stop (restart) all mongod or mongos instances using the MongoDB\nconfiguration file (default location: /etc/mongod.conf)."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000442-DB-000379","gid":"V-81923","rid":"SV-96637r1_rule","stig_id":"MD3X-00-000770","fix_id":"F-88773r2_fix","cci":["CCI-002422"],"nist":["SC-8 (2)"],"sdlc_stages":["scm"]},"code":"control 'V-81923' do\n  title \"MongoDB must maintain the confidentiality and integrity of information\nduring reception.\"\n  desc  \"Information can be either unintentionally or maliciously disclosed or\nmodified during reception, including, for example, during aggregation, at\nprotocol transformation points, and during packing/unpacking. These\nunauthorized disclosures or modifications compromise the confidentiality or\nintegrity of the information.\n\n    This requirement applies only to those applications that are either\ndistributed or can allow access to data nonlocally. Use of this requirement\nwill be limited to situations where the data owner has a strict requirement for\nensuring data integrity and confidentiality is maintained at every step of the\ndata transfer and handling process.\n\n    When receiving data, MongoDB, associated applications, and infrastructure\nmust leverage protection mechanisms.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    If the data owner does not have a strict requirement for ensuring data\nintegrity and confidentiality is maintained at every step of the data transfer\nand handling process, this is not a finding.\n\n    If such strict requirement for ensure data integrity and confidentially is\npresent, inspect the MongoDB configuration file (default location:\n/etc/mongod.conf) for the following entries:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    If net.ssl.mode is not set to \\\"requireSSL\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    Obtain a certificate from a valid DoD certificate authority to be used for\nencrypted data transmission.\n\n    Modify the MongoDB configuration file (default location: /etc/mongod.conf)\nwith the network configuration options.\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    Set \\\"net.ssl.mode\\\" to the \\\"requireSSL\\\".\n    Set \\\"net.ssl.KeyFile\\\" to the full path of the certificate (.pem) file.\n\n    Start/stop (restart) all mongod or mongos instances using the MongoDB\nconfiguration file (default location: /etc/mongod.conf).\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000442-DB-000379'\n  tag gid: 'V-81923'\n  tag rid: 'SV-96637r1_rule'\n  tag stig_id: 'MD3X-00-000770'\n  tag fix_id: 'F-88773r2_fix'\n  tag cci: ['CCI-002422']\n  tag nist: ['SC-8 (2)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl mode)) { should cmp 'requireSSL' }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl PEMKeyFile)) { should cmp '/etc/ssl/mongodb.pem' }\n  end\nend\n","source_location":{"ref":"controls/V-81923.rb","line":1},"id":"V-81923"},{"title":"MongoDB must map the PKI-authenticated identity to an associated user\naccount.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\nOnce a PKI certificate has been validated, it must be mapped to a DBMS user\naccount for the authenticated identity to be meaningful to MongoDB and useful\nfor authorization decisions.","descriptions":{"default":"The DoD standard for authentication is DoD-approved PKI certificates.\nOnce a PKI certificate has been validated, it must be mapped to a DBMS user\naccount for the authenticated identity to be meaningful to MongoDB and useful\nfor authorization decisions.","rationale":"","check":"To authenticate with a client certificate, you must first add the value of\nthe subject from the client certificate as a MongoDB user.\n\n    Each unique x.509 client certificate corresponds to a single MongoDB user;\ni.e. you cannot use a single client certificate to authenticate more than one\nMongoDB user.\n\n    Login to MongoDB and run the following command:\n\n    use $external\n    db.getUsers()\n\n    If the output does not contain a Relative Distinguished Name (RDN) for an\nauthorized user, this is a finding.\n\n    If the output shows a Relative Distinguished Name (RDN) for users that are\nnot authorized, this is a finding.","fix":"Add x.509 Certificate subject as an authorized user.\n\n    To authenticate with a client certificate, you must first add the value of\nthe subject from the client certificate as a MongoDB user.\n\n    Each unique x.509 client certificate corresponds to a single MongoDB user;\ni.e. you cannot use a single client certificate to authenticate more than one\nMongoDB user.\n\n    Note: The RDNs in the subject string must be compatible with the RFC2253\nstandard.\n\n    Retrieve the RFC2253 formatted subject from the client certificate with the\nfollowing command:\n    openssl x509 -in <pathToClient PEM> -inform PEM -subject -nameopt RFC2253\n\n    The command returns the subject string as well as certificate:\n    subject= CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry\n    -----BEGIN CERTIFICATE-----\n    # ...\n    -----END CERTIFICATE-----\n\n    Add the RFC2253 compliant value of the subject as a user. Omit spaces as\nneeded.\n\n    For example, in the mongo shell, to add the user with both the\n\"readWrite\" role in the test database and the \"userAdminAnyDatabase\" role\nwhich is defined only in the admin database:\n    db.getSiblingDB(\"$external\").runCommand(\n    {\n    createUser:\n\"CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry\",\n    roles: [\n    { role: 'readWrite', db: 'test' },\n    { role: 'userAdminAnyDatabase', db: 'admin' }\n    ],\n    writeConcern: { w: \"majority\" , wtimeout: 5000 }\n    }\n    )\n\n    In the above example, to add the user with the \"readWrite\" role in the\ntest database, the role specification document specified \"test\" in the \"db\"\nfield. To add \"userAdminAnyDatabase\" role for the user, the above example\nspecified \"admin\" in the \"db\" field.\n\n    Note: Some roles are defined only in the admin database, including:\nclusterAdmin, readAnyDatabase, readWriteAnyDatabase, dbAdminAnyDatabase, and\nuserAdminAnyDatabase. To add a user with these roles, specify \"admin\" in the\n\"db\" field. See Manage Users and Roles for details on adding a user with\nroles.\n\n    To remove a user that is not authorized run the following command:\n\n    use $external\n    db.dropUser(\"<RDN of user>\")"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000177-DB-000069","gid":"V-81873","rid":"SV-96587r1_rule","stig_id":"MD3X-00-000370","fix_id":"F-88723r1_fix","cci":["CCI-000187"],"nist":["IA-5 (2) (c)"]},"code":"control 'V-81873' do\n  title \"MongoDB must map the PKI-authenticated identity to an associated user\naccount.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\nOnce a PKI certificate has been validated, it must be mapped to a DBMS user\naccount for the authenticated identity to be meaningful to MongoDB and useful\nfor authorization decisions.\"\n  desc  'rationale', ''\n  desc  'check', \"\n    To authenticate with a client certificate, you must first add the value of\nthe subject from the client certificate as a MongoDB user.\n\n    Each unique x.509 client certificate corresponds to a single MongoDB user;\ni.e. you cannot use a single client certificate to authenticate more than one\nMongoDB user.\n\n    Login to MongoDB and run the following command:\n\n    use $external\n    db.getUsers()\n\n    If the output does not contain a Relative Distinguished Name (RDN) for an\nauthorized user, this is a finding.\n\n    If the output shows a Relative Distinguished Name (RDN) for users that are\nnot authorized, this is a finding.\n  \"\n  desc  'fix', \"\n    Add x.509 Certificate subject as an authorized user.\n\n    To authenticate with a client certificate, you must first add the value of\nthe subject from the client certificate as a MongoDB user.\n\n    Each unique x.509 client certificate corresponds to a single MongoDB user;\ni.e. you cannot use a single client certificate to authenticate more than one\nMongoDB user.\n\n    Note: The RDNs in the subject string must be compatible with the RFC2253\nstandard.\n\n    Retrieve the RFC2253 formatted subject from the client certificate with the\nfollowing command:\n    openssl x509 -in <pathToClient PEM> -inform PEM -subject -nameopt RFC2253\n\n    The command returns the subject string as well as certificate:\n    subject= CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry\n    -----BEGIN CERTIFICATE-----\n    # ...\n    -----END CERTIFICATE-----\n\n    Add the RFC2253 compliant value of the subject as a user. Omit spaces as\nneeded.\n\n    For example, in the mongo shell, to add the user with both the\n\\\"readWrite\\\" role in the test database and the \\\"userAdminAnyDatabase\\\" role\nwhich is defined only in the admin database:\n    db.getSiblingDB(\\\"$external\\\").runCommand(\n    {\n    createUser:\n\\\"CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry\\\",\n    roles: [\n    { role: 'readWrite', db: 'test' },\n    { role: 'userAdminAnyDatabase', db: 'admin' }\n    ],\n    writeConcern: { w: \\\"majority\\\" , wtimeout: 5000 }\n    }\n    )\n\n    In the above example, to add the user with the \\\"readWrite\\\" role in the\ntest database, the role specification document specified \\\"test\\\" in the \\\"db\\\"\nfield. To add \\\"userAdminAnyDatabase\\\" role for the user, the above example\nspecified \\\"admin\\\" in the \\\"db\\\" field.\n\n    Note: Some roles are defined only in the admin database, including:\nclusterAdmin, readAnyDatabase, readWriteAnyDatabase, dbAdminAnyDatabase, and\nuserAdminAnyDatabase. To add a user with these roles, specify \\\"admin\\\" in the\n\\\"db\\\" field. See Manage Users and Roles for details on adding a user with\nroles.\n\n    To remove a user that is not authorized run the following command:\n\n    use $external\n    db.dropUser(\\\"<RDN of user>\\\")\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000177-DB-000069'\n  tag gid: 'V-81873'\n  tag rid: 'SV-96587r1_rule'\n  tag stig_id: 'MD3X-00-000370'\n  tag fix_id: 'F-88723r1_fix'\n  tag cci: ['CCI-000187']\n  tag nist: ['IA-5 (2) (c)']\n  describe 'A manual review is required to ensure MongoDB maps the PKI-authenticated identity to an associated user\n  account' do\n    skip 'A manual review is required to ensure MongoDB maps the PKI-authenticated identity to an associated user\n    account'\n  end\nend\n","source_location":{"ref":"controls/V-81873.rb","line":1},"id":"V-81873"},{"title":"MongoDB must obscure feedback of authentication information during the\nauthentication process to protect the information from possible\nexploitation/use by unauthorized individuals.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Normally, with PKI authentication, the interaction with the user for\nauthentication will be handled by a software component separate from MongoDB,\nsuch as ActivIdentity ActivClient. However, in cases where MongoDB controls the\ninteraction, this requirement applies.\n\n    To prevent the compromise of authentication information such as passwords\nand PINs during the authentication process, the feedback from the system must\nnot provide any information that would allow an unauthorized user to compromise\nthe authentication mechanism.\n\n    Obfuscation of user-provided authentication secrets when typed into the\nsystem is a method used in addressing this risk.\n\n    Displaying asterisks when a user types in a password or a smart card PIN is\nan example of obscuring feedback of authentication secrets.\n\n    This calls for review of applications, which will require collaboration\nwith the application developers. It is recognized that in many cases, the\ndatabase administrator (DBA) is organizationally separate from the application\ndevelopers, and may have limited, if any, access to source code. Nevertheless,\nprotections of this type are so important to the secure operation of databases\nthat they must not be ignored. At a minimum, the DBA must attempt to obtain\nassurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","descriptions":{"default":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Normally, with PKI authentication, the interaction with the user for\nauthentication will be handled by a software component separate from MongoDB,\nsuch as ActivIdentity ActivClient. However, in cases where MongoDB controls the\ninteraction, this requirement applies.\n\n    To prevent the compromise of authentication information such as passwords\nand PINs during the authentication process, the feedback from the system must\nnot provide any information that would allow an unauthorized user to compromise\nthe authentication mechanism.\n\n    Obfuscation of user-provided authentication secrets when typed into the\nsystem is a method used in addressing this risk.\n\n    Displaying asterisks when a user types in a password or a smart card PIN is\nan example of obscuring feedback of authentication secrets.\n\n    This calls for review of applications, which will require collaboration\nwith the application developers. It is recognized that in many cases, the\ndatabase administrator (DBA) is organizationally separate from the application\ndevelopers, and may have limited, if any, access to source code. Nevertheless,\nprotections of this type are so important to the secure operation of databases\nthat they must not be ignored. At a minimum, the DBA must attempt to obtain\nassurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","rationale":"","check":"For the MongoDB command-line tools \"mongo shell\", \"mongodump\",\n\"mongorestore\", \"mongoimport\", \"mongoexport\", which cannot be configured\nnot to accept a plain-text password, and any other essential tool with the same\nlimitation, verify that the system documentation explains the need for the\ntool, who uses it, and any relevant mitigations and that AO approval has been\nobtained.\n\n    If it is not documented, this is a finding.\n\n    Request evidence that all users of these MongoDB command-line tools are\ntrained in the use of the \"-p\" option plain-text password option and how to\nkeep the password protected from unauthorized viewing/capture and that they\nadhere to this practice.\n\n    If evidence of training does not exist, this is a finding.","fix":"For the \"mongo shell\", \"mongodump\", \"mongorestore\", \"mongoimport\",\n\"mongoexport\", which can accept a plain-text password, and any other\nessential tool with the same limitation:\n\n    Document the need for it, who uses it, and any relevant mitigations, and\nobtain AO approval.\n\n    Train all users of the tool in the nature of using the plain-text password\noption and in how to keep the password protected from unauthorized\nviewing/capture and document they have been trained."},"impact":0.7,"refs":[],"tags":{"severity":"high","gtitle":"SRG-APP-000178-DB-000083","gid":"V-81927","rid":"SV-96641r1_rule","stig_id":"MD3X-00-000800","fix_id":"F-88777r1_fix","cci":["CCI-000206"],"nist":["IA-6"]},"code":"control 'V-81927' do\n  title \"MongoDB must obscure feedback of authentication information during the\nauthentication process to protect the information from possible\nexploitation/use by unauthorized individuals.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Normally, with PKI authentication, the interaction with the user for\nauthentication will be handled by a software component separate from MongoDB,\nsuch as ActivIdentity ActivClient. However, in cases where MongoDB controls the\ninteraction, this requirement applies.\n\n    To prevent the compromise of authentication information such as passwords\nand PINs during the authentication process, the feedback from the system must\nnot provide any information that would allow an unauthorized user to compromise\nthe authentication mechanism.\n\n    Obfuscation of user-provided authentication secrets when typed into the\nsystem is a method used in addressing this risk.\n\n    Displaying asterisks when a user types in a password or a smart card PIN is\nan example of obscuring feedback of authentication secrets.\n\n    This calls for review of applications, which will require collaboration\nwith the application developers. It is recognized that in many cases, the\ndatabase administrator (DBA) is organizationally separate from the application\ndevelopers, and may have limited, if any, access to source code. Nevertheless,\nprotections of this type are so important to the secure operation of databases\nthat they must not be ignored. At a minimum, the DBA must attempt to obtain\nassurances from the development organization that this issue has been\naddressed, and must document what has been discovered.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    For the MongoDB command-line tools \\\"mongo shell\\\", \\\"mongodump\\\",\n\\\"mongorestore\\\", \\\"mongoimport\\\", \\\"mongoexport\\\", which cannot be configured\nnot to accept a plain-text password, and any other essential tool with the same\nlimitation, verify that the system documentation explains the need for the\ntool, who uses it, and any relevant mitigations and that AO approval has been\nobtained.\n\n    If it is not documented, this is a finding.\n\n    Request evidence that all users of these MongoDB command-line tools are\ntrained in the use of the \\\"-p\\\" option plain-text password option and how to\nkeep the password protected from unauthorized viewing/capture and that they\nadhere to this practice.\n\n    If evidence of training does not exist, this is a finding.\n  \"\n  desc  'fix', \"\n    For the \\\"mongo shell\\\", \\\"mongodump\\\", \\\"mongorestore\\\", \\\"mongoimport\\\",\n\\\"mongoexport\\\", which can accept a plain-text password, and any other\nessential tool with the same limitation:\n\n    Document the need for it, who uses it, and any relevant mitigations, and\nobtain AO approval.\n\n    Train all users of the tool in the nature of using the plain-text password\noption and in how to keep the password protected from unauthorized\nviewing/capture and document they have been trained.\n  \"\n  impact 0.7\n  tag severity: 'high'\n  tag gtitle: 'SRG-APP-000178-DB-000083'\n  tag gid: 'V-81927'\n  tag rid: 'SV-96641r1_rule'\n  tag stig_id: 'MD3X-00-000800'\n  tag fix_id: 'F-88777r1_fix'\n  tag cci: ['CCI-000206']\n  tag nist: ['IA-6']\n\n  describe 'A manual review is required to ensure MongoDB obscures the feedback of authentication information during the\n  authentication process to protect the information from possible\n  exploitation/use by unauthorized individuals.' do\n    skip 'A manual review is required to ensure MongoDB obscures the feedback of authentication information during the\n    authentication process to protect the information from possible\n    exploitation/use by unauthorized individuals.'\n  end\nend\n","source_location":{"ref":"controls/V-81927.rb","line":1},"id":"V-81927"},{"title":"MongoDB must prevent unauthorized and unintended information transfer\nvia shared system resources.","desc":"The purpose of this control is to prevent information, including\nencrypted representations of information, produced by the actions of a prior\nuser/role (or the actions of a process acting on behalf of a prior user/role)\nfrom being available to any current user/role (or current process) that obtains\naccess to a shared system resource (e.g., registers, main memory, secondary\nstorage) after the resource has been released back to the information system.\nControl of information in shared resources is also referred to as object reuse.","descriptions":{"default":"The purpose of this control is to prevent information, including\nencrypted representations of information, produced by the actions of a prior\nuser/role (or the actions of a process acting on behalf of a prior user/role)\nfrom being available to any current user/role (or current process) that obtains\naccess to a shared system resource (e.g., registers, main memory, secondary\nstorage) after the resource has been released back to the information system.\nControl of information in shared resources is also referred to as object reuse.","rationale":"","check":"Verify the permissions for the following database files or directories:\n\nMongoDB default configuration file: \"/etc/mongod.conf\"\nMongoDB default data directory: \"/var/lib/mongo\"\n\nIf the owner and group are not both \"mongod\", this is a finding.\n\nIf the file permissions are more permissive than \"755\", this is a finding.","fix":"Correct the permission to the files and/or directories that are in\nviolation.\n\n    MongoDB Configuration file (default location):\n    chown mongod:mongod /etc/mongod.conf\n    chmod 755 /etc/mongod.conf\n\n    MongoDB data file directory (default location):\n    chown -R mongod:mongod/var/lib/mongo\n    chmod -R 755/var/lib/mongo"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000243-DB-000373","satisfies":["SRG-APP-000243-DB-000373","SRG-APP-000243-DB-000374"],"gid":"V-81887","rid":"SV-96601r1_rule","stig_id":"MD3X-00-000470","fix_id":"F-88737r1_fix","cci":["CCI-001090"],"nist":["SC-4"]},"code":"control 'V-81887' do\n  title \"MongoDB must prevent unauthorized and unintended information transfer\nvia shared system resources.\"\n  desc  \"The purpose of this control is to prevent information, including\nencrypted representations of information, produced by the actions of a prior\nuser/role (or the actions of a process acting on behalf of a prior user/role)\nfrom being available to any current user/role (or current process) that obtains\naccess to a shared system resource (e.g., registers, main memory, secondary\nstorage) after the resource has been released back to the information system.\nControl of information in shared resources is also referred to as object reuse.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Verify the permissions for the following database files or directories:\n\n    MongoDB default configuration file: \\\"/etc/mongod.conf\\\"\n    MongoDB default data directory: \\\"/var/lib/mongo\\\"\n\n    If the owner and group are not both \\\"mongod\\\", this is a finding.\n\n    If the file permissions are more permissive than \\\"755\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    Correct the permission to the files and/or directories that are in\nviolation.\n\n    MongoDB Configuration file (default location):\n    chown mongod:mongod /etc/mongod.conf\n    chmod 755 /etc/mongod.conf\n\n    MongoDB data file directory (default location):\n    chown -R mongod:mongod/var/lib/mongo\n    chmod -R 755/var/lib/mongo\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000243-DB-000373'\n  tag satisfies: %w(SRG-APP-000243-DB-000373 SRG-APP-000243-DB-000374)\n  tag gid: 'V-81887'\n  tag rid: 'SV-96601r1_rule'\n  tag stig_id: 'MD3X-00-000470'\n  tag fix_id: 'F-88737r1_fix'\n  tag cci: ['CCI-001090']\n  tag nist: ['SC-4']\n\n  describe file(attribute('mongod_conf')) do\n    it { should_not be_more_permissive_than('0755') }\n    its('owner') { should eq 'mongod' }\n    its('group') { should eq 'mongod' }\n  end\n\n  describe directory('/var/lib/mongo') do\n    it { should_not be_more_permissive_than('0755') }\n    its('owner') { should eq 'mongod' }\n    its('group') { should eq 'mongod' }\n  end\nend\n","source_location":{"ref":"controls/V-81887.rb","line":1},"id":"V-81887"},{"title":"MongoDB must require users to reauthenticate when organization-defined\ncircumstances or situations require reauthentication.","desc":"The DoD standard for authentication of an interactive user is the\npresentation of a Common Access Card (CAC) or other physical token bearing a\nvalid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\nwith a Personal Identification Number (PIN) to be entered by the user at the\nbeginning of each session and whenever reauthentication is required.\n\n    Without reauthentication, users may access resources or perform tasks for\nwhich they do not have authorization.\n\n    When applications provide the capability to change security roles or\nescalate the functional capability of the application, it is critical the user\nreauthenticate.\n\n    In addition to the reauthentication requirements associated with session\nlocks, organizations may require reauthentication of individuals and/or devices\nin other situations, including (but not limited to) the following circumstances:\n\n    (i) When authenticators change;\n    (ii) When roles change;\n    (iii) When security categories of information systems change;\n    (iv) When the execution of privileged functions occurs;\n    (v) After a fixed period of time; or\n    (vi) Periodically.\n\n    Within the DoD, the minimum circumstances requiring reauthentication are\nprivilege escalation and role changes.","descriptions":{"default":"The DoD standard for authentication of an interactive user is the\npresentation of a Common Access Card (CAC) or other physical token bearing a\nvalid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\nwith a Personal Identification Number (PIN) to be entered by the user at the\nbeginning of each session and whenever reauthentication is required.\n\n    Without reauthentication, users may access resources or perform tasks for\nwhich they do not have authorization.\n\n    When applications provide the capability to change security roles or\nescalate the functional capability of the application, it is critical the user\nreauthenticate.\n\n    In addition to the reauthentication requirements associated with session\nlocks, organizations may require reauthentication of individuals and/or devices\nin other situations, including (but not limited to) the following circumstances:\n\n    (i) When authenticators change;\n    (ii) When roles change;\n    (iii) When security categories of information systems change;\n    (iv) When the execution of privileged functions occurs;\n    (v) After a fixed period of time; or\n    (vi) Periodically.\n\n    Within the DoD, the minimum circumstances requiring reauthentication are\nprivilege escalation and role changes.","rationale":"","check":"If organization-defined circumstances or situations require\nreauthentication, and these situations are not configured to terminate existing\nlogins to require reauthentication, this is a finding.","fix":"Determine the organization-defined circumstances or situations\nthat require reauthentication and ensure that the mongod and mongos processes\nare stopped/started (restart)."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000389-DB-000372","gid":"V-81913","rid":"SV-96627r1_rule","stig_id":"MD3X-00-000700","fix_id":"F-88763r1_fix","cci":["CCI-002038"],"nist":["IA-11"]},"code":"control 'V-81913' do\n  title \"MongoDB must require users to reauthenticate when organization-defined\ncircumstances or situations require reauthentication.\"\n  desc  \"The DoD standard for authentication of an interactive user is the\npresentation of a Common Access Card (CAC) or other physical token bearing a\nvalid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled\nwith a Personal Identification Number (PIN) to be entered by the user at the\nbeginning of each session and whenever reauthentication is required.\n\n    Without reauthentication, users may access resources or perform tasks for\nwhich they do not have authorization.\n\n    When applications provide the capability to change security roles or\nescalate the functional capability of the application, it is critical the user\nreauthenticate.\n\n    In addition to the reauthentication requirements associated with session\nlocks, organizations may require reauthentication of individuals and/or devices\nin other situations, including (but not limited to) the following circumstances:\n\n    (i) When authenticators change;\n    (ii) When roles change;\n    (iii) When security categories of information systems change;\n    (iv) When the execution of privileged functions occurs;\n    (v) After a fixed period of time; or\n    (vi) Periodically.\n\n    Within the DoD, the minimum circumstances requiring reauthentication are\nprivilege escalation and role changes.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"If organization-defined circumstances or situations require\nreauthentication, and these situations are not configured to terminate existing\nlogins to require reauthentication, this is a finding.\"\n  desc  'fix', \"Determine the organization-defined circumstances or situations\nthat require reauthentication and ensure that the mongod and mongos processes\nare stopped/started (restart).\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000389-DB-000372'\n  tag gid: 'V-81913'\n  tag rid: 'SV-96627r1_rule'\n  tag stig_id: 'MD3X-00-000700'\n  tag fix_id: 'F-88763r1_fix'\n  tag cci: ['CCI-002038']\n  tag nist: ['IA-11']\n\n  describe 'A manual review is required to ensure MongoDB requires users to reauthenticate when organization-defined\n  circumstances or situations require reauthentication.' do\n    skip 'A manual review is required to ensure MongoDB requires users to reauthenticate when organization-defined\n  circumstances or situations require reauthentication.'\n  end\nend\n","source_location":{"ref":"controls/V-81913.rb","line":1},"id":"V-81913"},{"title":"MongoDB must protect the confidentiality and integrity of all\ninformation at rest.","desc":"This control is intended to address the confidentiality and integrity\nof information at rest in non-mobile devices and covers user information and\nsystem information. Information at rest refers to the state of information when\nit is located on a secondary storage device (e.g., disk drive, tape drive)\nwithin an organizational information system. Applications and application users\ngenerate information throughout the course of their application use.\n\n    User data generated, as well as application-specific configuration data,\nneeds to be protected. Organizations may choose to employ different mechanisms\nto achieve confidentiality and integrity protections, as appropriate.\n\n    If the confidentiality and integrity of application data is not protected,\nthe data will be open to compromise and unauthorized modification.","descriptions":{"default":"This control is intended to address the confidentiality and integrity\nof information at rest in non-mobile devices and covers user information and\nsystem information. Information at rest refers to the state of information when\nit is located on a secondary storage device (e.g., disk drive, tape drive)\nwithin an organizational information system. Applications and application users\ngenerate information throughout the course of their application use.\n\n    User data generated, as well as application-specific configuration data,\nneeds to be protected. Organizations may choose to employ different mechanisms\nto achieve confidentiality and integrity protections, as appropriate.\n\n    If the confidentiality and integrity of application data is not protected,\nthe data will be open to compromise and unauthorized modification.","rationale":"","check":"If the MongoDB Encrypted Storage Engines is being used, ensure that the\n\"security.enableEncryption\" option is set to \"true\" in the MongoDB\nconfiguration file (default location: /etc/mongod.conf) or that MongoDB was\nstarted with the \"--enableEncryption\" command line option.\n\n    Check the MongoDB configuration file (default location: /etc/mongod.conf).\n\n    If the following parameter is not present, this is a finding.\n\n    security:\n    enableEncryption: \"true\"\n\n    If any mongod process is started with \"--enableEncryption false\", this is\na finding.","fix":"Ensure that the MongoDB Configuration file (default location:\n/etc/mongod.conf) has the following set:\n\n    security:\n    enableEncryption: \"true\"\n\n    Ensure that any mongod process that contains the option\n\"--enableEcryption\" has \"true\" as its parameter <boolean> value (e.g.,\n\"--enableEncryption true\").\n\n    Stop/start (restart) and mongod process using either the MongoDB\nconfiguration file or that contains the \"--enableEncryption\" option."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000231-DB-000154","gid":"V-81883","rid":"SV-96597r1_rule","stig_id":"MD3X-00-000440","fix_id":"F-88733r1_fix","cci":["CCI-001199"],"nist":["SC-28"],"sdlc_stages":["scm"]},"code":"control 'V-81883' do\n  title \"MongoDB must protect the confidentiality and integrity of all\ninformation at rest.\"\n  desc  \"This control is intended to address the confidentiality and integrity\nof information at rest in non-mobile devices and covers user information and\nsystem information. Information at rest refers to the state of information when\nit is located on a secondary storage device (e.g., disk drive, tape drive)\nwithin an organizational information system. Applications and application users\ngenerate information throughout the course of their application use.\n\n    User data generated, as well as application-specific configuration data,\nneeds to be protected. Organizations may choose to employ different mechanisms\nto achieve confidentiality and integrity protections, as appropriate.\n\n    If the confidentiality and integrity of application data is not protected,\nthe data will be open to compromise and unauthorized modification.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    If the MongoDB Encrypted Storage Engines is being used, ensure that the\n\\\"security.enableEncryption\\\" option is set to \\\"true\\\" in the MongoDB\nconfiguration file (default location: /etc/mongod.conf) or that MongoDB was\nstarted with the \\\"--enableEncryption\\\" command line option.\n\n    Check the MongoDB configuration file (default location: /etc/mongod.conf).\n\n    If the following parameter is not present, this is a finding.\n\n    security:\n    enableEncryption: \\\"true\\\"\n\n    If any mongod process is started with \\\"--enableEncryption false\\\", this is\na finding.\n  \"\n  desc 'fix', \"\n    Ensure that the MongoDB Configuration file (default location:\n/etc/mongod.conf) has the following set:\n\n    security:\n    enableEncryption: \\\"true\\\"\n\n    Ensure that any mongod process that contains the option\n\\\"--enableEcryption\\\" has \\\"true\\\" as its parameter <boolean> value (e.g.,\n\\\"--enableEncryption true\\\").\n\n    Stop/start (restart) and mongod process using either the MongoDB\nconfiguration file or that contains the \\\"--enableEncryption\\\" option.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag gid: 'V-81883'\n  tag rid: 'SV-96597r1_rule'\n  tag stig_id: 'MD3X-00-000440'\n  tag fix_id: 'F-88733r1_fix'\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(input('mongod_conf')) do\n    its(%w(security enableEncryption)) { should cmp 'true' }\n  end\nend\n","source_location":{"ref":"controls/V-81883.rb","line":1},"id":"V-81883"},{"title":"If passwords are used for authentication, MongoDB must transmit only\nencrypted representations of passwords.","desc":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, passwords need to be protected at all times, and encryption\nis the standard method for protecting passwords during transmission.\n\n    DBMS passwords sent in clear text format across the network are vulnerable\nto discovery by unauthorized users. Disclosure of passwords may easily lead to\nunauthorized access to the database.","descriptions":{"default":"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, passwords need to be protected at all times, and encryption\nis the standard method for protecting passwords during transmission.\n\n    DBMS passwords sent in clear text format across the network are vulnerable\nto discovery by unauthorized users. Disclosure of passwords may easily lead to\nunauthorized access to the database.","rationale":"","check":"In the MongoDB database configuration file (default location:\n/etc/mongod.conf), review the following parameters:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/mongodbca.pem\n\n    If the \"CAFile\" parameter is not present, this is a finding.\n\n    If the \"allowInvalidCertificates\" parameter is found, this is a finding.\n\n    net:\n    ssl:\n    allowInvalidCertificates: true","fix":"In the MongoDB database configuration file (default location:\n/etc/mongod.conf) ensure the following parameters following parameter are set\nand configured correctly:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/mongodbca.pem\n\n    Remove any occurrence of the \"allowInvalidCertificates\" parameter:\n\n    net:\n    ssl:\n    allowInvalidCertificates: true\n\n    Stop/start (restart) the mongod or mongos instance using this configuration."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000172-DB-000075","satisfies":["SRG-APP-000172-DB-000075","SRG-APP-000175-DB-000067"],"gid":"V-81869","rid":"SV-96583r1_rule","stig_id":"MD3X-00-000340","fix_id":"F-88719r1_fix","cci":["CCI-000185","CCI-000197"],"nist":["IA-5 (2) (a)","IA-5 (1) (c)"],"sdlc_stages":["scm"]},"code":"control 'V-81869' do\n  title \"If passwords are used for authentication, MongoDB must transmit only\nencrypted representations of passwords.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\n\n    Authentication based on User ID and Password may be used only when it is\nnot possible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, passwords need to be protected at all times, and encryption\nis the standard method for protecting passwords during transmission.\n\n    DBMS passwords sent in clear text format across the network are vulnerable\nto discovery by unauthorized users. Disclosure of passwords may easily lead to\nunauthorized access to the database.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf), review the following parameters:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/mongodbca.pem\n\n    If the \\\"CAFile\\\" parameter is not present, this is a finding.\n\n    If the \\\"allowInvalidCertificates\\\" parameter is found, this is a finding.\n\n    net:\n    ssl:\n    allowInvalidCertificates: true\n  \"\n  desc 'fix', \"\n    In the MongoDB database configuration file (default location:\n/etc/mongod.conf) ensure the following parameters following parameter are set\nand configured correctly:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n    CAFile: /etc/ssl/mongodbca.pem\n\n    Remove any occurrence of the \\\"allowInvalidCertificates\\\" parameter:\n\n    net:\n    ssl:\n    allowInvalidCertificates: true\n\n    Stop/start (restart) the mongod or mongos instance using this configuration.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000172-DB-000075'\n  tag satisfies: %w(SRG-APP-000172-DB-000075 SRG-APP-000175-DB-000067)\n  tag gid: 'V-81869'\n  tag rid: 'SV-96583r1_rule'\n  tag stig_id: 'MD3X-00-000340'\n  tag fix_id: 'F-88719r1_fix'\n  tag cci: %w(CCI-000185 CCI-000197)\n  tag nist: ['IA-5 (2) (a)', 'IA-5 (1) (c)']\n  tag sdlc_stages: ['scm']\n  \n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl allowInvalidCertificates)) { should be nil }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl mode)) { should cmp 'requireSSL' }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl PEMKeyFile)) { should cmp '/etc/ssl/mongodb.pem' }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl CAFile)) { should cmp '/etc/ssl/mongodbca.pem' }\n  end\nend\n","source_location":{"ref":"controls/V-81869.rb","line":1},"id":"V-81869"},{"title":"MongoDB must reveal detailed error messages only to the ISSO, ISSM,\nSA, and DBA.","desc":"If MongoDB provides too much information in error logs and\nadministrative messages to the screen, this could lead to compromise. The\nstructure and content of error messages need to be carefully considered by the\norganization and development team. The extent to which the information system\nis able to identify and handle error conditions is guided by organizational\npolicy and operational requirements.\n\n    Some default DBMS error messages can contain information that could aid an\nattacker in, among others things, identifying the database type, host address,\nor state of the database. Custom errors may contain sensitive customer\ninformation.\n\n    It is important that detailed error messages be visible only to those who\nare authorized to view them; that general users receive only generalized\nacknowledgment that errors have occurred; and that these generalized messages\nappear only when relevant to the user's task. For example, a message along the\nlines of, \"An error has occurred. Unable to save your changes. If this problem\npersists, contact your help desk\" would be relevant. A message such as\n\"Warning: your transaction generated a large number of page splits\" would\nlikely not be relevant.\n\n    Administrative users authorized to review detailed error messages typically\nare the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\naccording to organization-specific needs, with appropriate approval.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","descriptions":{"default":"If MongoDB provides too much information in error logs and\nadministrative messages to the screen, this could lead to compromise. The\nstructure and content of error messages need to be carefully considered by the\norganization and development team. The extent to which the information system\nis able to identify and handle error conditions is guided by organizational\npolicy and operational requirements.\n\n    Some default DBMS error messages can contain information that could aid an\nattacker in, among others things, identifying the database type, host address,\nor state of the database. Custom errors may contain sensitive customer\ninformation.\n\n    It is important that detailed error messages be visible only to those who\nare authorized to view them; that general users receive only generalized\nacknowledgment that errors have occurred; and that these generalized messages\nappear only when relevant to the user's task. For example, a message along the\nlines of, \"An error has occurred. Unable to save your changes. If this problem\npersists, contact your help desk\" would be relevant. A message such as\n\"Warning: your transaction generated a large number of page splits\" would\nlikely not be relevant.\n\n    Administrative users authorized to review detailed error messages typically\nare the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\naccording to organization-specific needs, with appropriate approval.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.","rationale":"","check":"A mongod or mongos running with \"security.redactClientLogData\" redacts\nany message accompanying a given log event before logging.\n\n    This prevents the mongod or mongos from writing potentially sensitive data\nstored on the database to the diagnostic log. Metadata such as error or\noperation codes, line numbers, and source file names are still visible in the\nlogs.\n\n    Verify that the MongoDB configuration file (default location:\n/etc/mongod.conf) contains the following:\n\n    security:\n    redactClientLogData: \"true\"\n\n    If this parameter is not present, this is a finding.","fix":"Edit the MongoDB configuration file (default location: /etc/mongod.conf)\nand add the following parameter \"redactClientLogData\" in the security section\nof that file:\n\n    security:\n    redactClientLogData: \"true\"\n\n    Stop/start (restart) any mongod or mongos using the MongoDB configuration\nfile."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000267-DB-000163","gid":"V-81895","rid":"SV-96609r1_rule","stig_id":"MD3X-00-000530","fix_id":"F-88745r1_fix","cci":["CCI-001314"],"nist":["SI-11 b"],"sdlc_stages":["scm"]},"code":"control 'V-81895' do\n  title \"MongoDB must reveal detailed error messages only to the ISSO, ISSM,\nSA, and DBA.\"\n  desc  \"If MongoDB provides too much information in error logs and\nadministrative messages to the screen, this could lead to compromise. The\nstructure and content of error messages need to be carefully considered by the\norganization and development team. The extent to which the information system\nis able to identify and handle error conditions is guided by organizational\npolicy and operational requirements.\n\n    Some default DBMS error messages can contain information that could aid an\nattacker in, among others things, identifying the database type, host address,\nor state of the database. Custom errors may contain sensitive customer\ninformation.\n\n    It is important that detailed error messages be visible only to those who\nare authorized to view them; that general users receive only generalized\nacknowledgment that errors have occurred; and that these generalized messages\nappear only when relevant to the user's task. For example, a message along the\nlines of, \\\"An error has occurred. Unable to save your changes. If this problem\npersists, contact your help desk\\\" would be relevant. A message such as\n\\\"Warning: your transaction generated a large number of page splits\\\" would\nlikely not be relevant.\n\n    Administrative users authorized to review detailed error messages typically\nare the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\naccording to organization-specific needs, with appropriate approval.\n\n    This calls for inspection of application source code, which will require\ncollaboration with the application developers. It is recognized that in many\ncases, the database administrator (DBA) is organizationally separate from the\napplication developers, and may have limited, if any, access to source code.\nNevertheless, protections of this type are so important to the secure operation\nof databases that they must not be ignored. At a minimum, the DBA must attempt\nto obtain assurances from the development organization that this issue has been\naddressed, and must document what has been discovered.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    A mongod or mongos running with \\\"security.redactClientLogData\\\" redacts\nany message accompanying a given log event before logging.\n\n    This prevents the mongod or mongos from writing potentially sensitive data\nstored on the database to the diagnostic log. Metadata such as error or\noperation codes, line numbers, and source file names are still visible in the\nlogs.\n\n    Verify that the MongoDB configuration file (default location:\n/etc/mongod.conf) contains the following:\n\n    security:\n    redactClientLogData: \\\"true\\\"\n\n    If this parameter is not present, this is a finding.\n  \"\n  desc 'fix', \"\n    Edit the MongoDB configuration file (default location: /etc/mongod.conf)\nand add the following parameter \\\"redactClientLogData\\\" in the security section\nof that file:\n\n    security:\n    redactClientLogData: \\\"true\\\"\n\n    Stop/start (restart) any mongod or mongos using the MongoDB configuration\nfile.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000267-DB-000163'\n  tag gid: 'V-81895'\n  tag rid: 'SV-96609r1_rule'\n  tag stig_id: 'MD3X-00-000530'\n  tag fix_id: 'F-88745r1_fix'\n  tag cci: ['CCI-001314']\n  tag nist: ['SI-11 b']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security redactClientLogData)) { should cmp 'true' }\n  end\nend\n","source_location":{"ref":"controls/V-81895.rb","line":1},"id":"V-81895"},{"title":"MongoDB must integrate with an organization-level\nauthentication/access mechanism providing account management and automation for\nall users, groups, roles, and any other principals.","desc":"MongoDB must integrate with an organization-level\nauthentication/access mechanism providing account management and automation for\nall users, groups, roles, and any other principals.","descriptions":{"default":"MongoDB must integrate with an organization-level\nauthentication/access mechanism providing account management and automation for\nall users, groups, roles, and any other principals.","rationale":"","check":"Verify that the MongoDB configuration file (default location:\n/etc/mongod.conf) contains the following:\n\n    security:\n    authorization: \"enabled\"\n\n    If this parameter is not present, this is a finding.","fix":"Edit the MongoDB configuration file (default location: /etc/mongod.con) to\ninclude the following:\n\n    security:\n    authorization: \"enabled\"\n\n    This will enable SCRAM-SHA-1 authentication (default).\n\n    Instruction on configuring the default authentication is provided here:\n\n    https://docs.mongodb.com/v3.4/tutorial/enable-authentication/\n\n    The high-level steps described by the above will require the following:\n\n    1. Start MongoDB without access control.\n    2. Connect to the instance.\n    3. Create the user administrator.\n    4. Restart the MongoDB instance with access control.\n    5. Connect and authenticate as the user administrator.\n    6. Create additional users as needed for your deployment."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000023-DB-000001","gid":"V-81843","rid":"SV-96557r1_rule","stig_id":"MD3X-00-000010","fix_id":"F-88693r1_fix","cci":["CCI-000015"],"nist":["AC-2 (1)"],"sdlc_stages":["scm"]},"code":"control 'V-81843' do\n  title \"MongoDB must integrate with an organization-level\nauthentication/access mechanism providing account management and automation for\nall users, groups, roles, and any other principals.\"\n  desc  \"MongoDB must integrate with an organization-level\nauthentication/access mechanism providing account management and automation for\nall users, groups, roles, and any other principals.\"\n  desc  'rationale', ''\n  desc  'check', \"\n    Verify that the MongoDB configuration file (default location:\n/etc/mongod.conf) contains the following:\n\n    security:\n    authorization: \\\"enabled\\\"\n\n    If this parameter is not present, this is a finding.\n  \"\n  desc 'fix', \"\n    Edit the MongoDB configuration file (default location: /etc/mongod.con) to\ninclude the following:\n\n    security:\n    authorization: \\\"enabled\\\"\n\n    This will enable SCRAM-SHA-1 authentication (default).\n\n    Instruction on configuring the default authentication is provided here:\n\n    https://docs.mongodb.com/v3.4/tutorial/enable-authentication/\n\n    The high-level steps described by the above will require the following:\n\n    1. Start MongoDB without access control.\n    2. Connect to the instance.\n    3. Create the user administrator.\n    4. Restart the MongoDB instance with access control.\n    5. Connect and authenticate as the user administrator.\n    6. Create additional users as needed for your deployment.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000023-DB-000001'\n  tag gid: 'V-81843'\n  tag rid: 'SV-96557r1_rule'\n  tag stig_id: 'MD3X-00-000010'\n  tag fix_id: 'F-88693r1_fix'\n  tag cci: ['CCI-000015']\n  tag nist: ['AC-2 (1)']\n  tag sdlc_stages: ['scm']\n\n  mongo_conf_file = attribute('mongod_conf')\n\n  describe yaml(mongo_conf_file.to_s) do\n    its(%w(security authorization)) { should cmp 'enabled' }\n  end\nend\n","source_location":{"ref":"controls/V-81843.rb","line":1},"id":"V-81843"},{"title":"If DBMS authentication, using passwords, is employed, MongoDB must\nenforce the DoD standards for password complexity and lifetime.","desc":"OS/enterprise authentication and identification must be used\n(SQL2-00-023600). Native DBMS authentication may be used only when\ncircumstances make it unavoidable; and must be documented and AO-approved.\n\n    The DoD standard for authentication is DoD-approved PKI certificates.\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, the DoD standards for password complexity and lifetime must\nbe implemented. DBMS products that can inherit the rules for these from the\noperating system or access control program (e.g., Microsoft Active Directory)\nmust be configured to do so. For other DBMSs, the rules must be enforced using\navailable configuration parameters or custom code.","descriptions":{"default":"OS/enterprise authentication and identification must be used\n(SQL2-00-023600). Native DBMS authentication may be used only when\ncircumstances make it unavoidable; and must be documented and AO-approved.\n\n    The DoD standard for authentication is DoD-approved PKI certificates.\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, the DoD standards for password complexity and lifetime must\nbe implemented. DBMS products that can inherit the rules for these from the\noperating system or access control program (e.g., Microsoft Active Directory)\nmust be configured to do so. For other DBMSs, the rules must be enforced using\navailable configuration parameters or custom code.","rationale":"","check":"If MongoDB is using Native LDAP authentication where the LDAP server is\nconfigured to enforce password complexity and lifetime, this is not a finding.\n\n    If MongoDB is using Kerberos authentication where Kerberos is configured to\nenforce password complexity and lifetime, this is not a finding.\n\n    If MongoDB is configured for SCRAM-SHA1, MONGODB-CR, LDAP Proxy\nauthentication, this is a finding.\n\n    See:\nhttps://docs.mongodb.com/v3.4/core/authentication/#authentication-methods","fix":"Either configure MongoDB for Native LDAP authentication where LDAP is\nconfigured to enforce password complexity and lifetime.\n    OR\n    Configure MongoDB Kerberos authentication where Kerberos is configured to\nenforce password complexity and lifetime."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000164-DB-000401","gid":"V-81865","rid":"SV-96579r1_rule","stig_id":"MD3X-00-000320","fix_id":"F-88715r1_fix","cci":["CCI-000192"],"nist":["IA-5 (1) (a)"]},"code":"control 'V-81865' do\n  title \"If DBMS authentication, using passwords, is employed, MongoDB must\nenforce the DoD standards for password complexity and lifetime.\"\n  desc  \"OS/enterprise authentication and identification must be used\n(SQL2-00-023600). Native DBMS authentication may be used only when\ncircumstances make it unavoidable; and must be documented and AO-approved.\n\n    The DoD standard for authentication is DoD-approved PKI certificates.\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\n    In such cases, the DoD standards for password complexity and lifetime must\nbe implemented. DBMS products that can inherit the rules for these from the\noperating system or access control program (e.g., Microsoft Active Directory)\nmust be configured to do so. For other DBMSs, the rules must be enforced using\navailable configuration parameters or custom code.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    If MongoDB is using Native LDAP authentication where the LDAP server is\nconfigured to enforce password complexity and lifetime, this is not a finding.\n\n    If MongoDB is using Kerberos authentication where Kerberos is configured to\nenforce password complexity and lifetime, this is not a finding.\n\n    If MongoDB is configured for SCRAM-SHA1, MONGODB-CR, LDAP Proxy\nauthentication, this is a finding.\n\n    See:\nhttps://docs.mongodb.com/v3.4/core/authentication/#authentication-methods\n  \"\n  desc 'fix', \"\n    Either configure MongoDB for Native LDAP authentication where LDAP is\nconfigured to enforce password complexity and lifetime.\n    OR\n    Configure MongoDB Kerberos authentication where Kerberos is configured to\nenforce password complexity and lifetime.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000164-DB-000401'\n  tag gid: 'V-81865'\n  tag rid: 'SV-96579r1_rule'\n  tag stig_id: 'MD3X-00-000320'\n  tag fix_id: 'F-88715r1_fix'\n  tag cci: ['CCI-000192']\n  tag nist: ['IA-5 (1) (a)']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    next unless db.include? 'databases'\n\n    a.push(db)\n    get_databases.delete(db)\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  dbnames.each do |dbs|\n    users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n    users.each do |t|\n      loc_colon = t.index(':')\n\n      user = t[loc_colon + 3..-1]\n\n      loc_quote = user.index('\"')\n\n      username = user[0, loc_quote]\n\n      getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"},{credentials: 1, _id: false})'\").stdout.strip.split(\"\\n\")\n\n      getdb_roles.each do |r|\n        describe \"The credential meachanim used for user: #{username}\" do\n          subject { r }\n          it { should_not include 'SCRAM-SHA1' }\n        end\n      end\n    end\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(security ldap)) { should be nil }\n  end\nend\n","source_location":{"ref":"controls/V-81865.rb","line":1},"id":"V-81865"},{"title":"MongoDB must enforce discretionary access control policies, as defined\nby the data owner, over defined subjects and objects.","desc":"Discretionary Access Control (DAC) is based on the notion that\nindividual users are \"owners\" of objects and therefore have discretion over\nwho should be authorized to access the object and in which mode (e.g., read or\nwrite). Ownership is usually acquired as a consequence of creating the object\nor via specified ownership assignment. DAC allows the owner to determine who\nwill have access to objects they control. An example of DAC includes\nuser-controlled table permissions.\n\n    When discretionary access control policies are implemented, subjects are\nnot constrained with regard to what actions they can take with information for\nwhich they have already been granted access. Thus, subjects that have been\ngranted access to information are not prevented from passing (i.e., the\nsubjects have the discretion to pass) the information to other subjects or\nobjects.\n\n    A subject that is constrained in its operation by Mandatory Access Control\npolicies is still able to operate under the less rigorous constraints of this\nrequirement. Thus, while Mandatory Access Control imposes constraints\npreventing a subject from passing information to another subject operating at a\ndifferent sensitivity level, this requirement permits the subject to pass the\ninformation to any subject at the same sensitivity level.\n\n    The policy is bounded by the information system boundary. Once the\ninformation is passed outside of the control of the information system,\nadditional means may be required to ensure the constraints remain in effect.\nWhile the older, more traditional definitions of discretionary access control\nrequire identity-based access control, that limitation is not required for this\nuse of discretionary access control.","descriptions":{"default":"Discretionary Access Control (DAC) is based on the notion that\nindividual users are \"owners\" of objects and therefore have discretion over\nwho should be authorized to access the object and in which mode (e.g., read or\nwrite). Ownership is usually acquired as a consequence of creating the object\nor via specified ownership assignment. DAC allows the owner to determine who\nwill have access to objects they control. An example of DAC includes\nuser-controlled table permissions.\n\n    When discretionary access control policies are implemented, subjects are\nnot constrained with regard to what actions they can take with information for\nwhich they have already been granted access. Thus, subjects that have been\ngranted access to information are not prevented from passing (i.e., the\nsubjects have the discretion to pass) the information to other subjects or\nobjects.\n\n    A subject that is constrained in its operation by Mandatory Access Control\npolicies is still able to operate under the less rigorous constraints of this\nrequirement. Thus, while Mandatory Access Control imposes constraints\npreventing a subject from passing information to another subject operating at a\ndifferent sensitivity level, this requirement permits the subject to pass the\ninformation to any subject at the same sensitivity level.\n\n    The policy is bounded by the information system boundary. Once the\ninformation is passed outside of the control of the information system,\nadditional means may be required to ensure the constraints remain in effect.\nWhile the older, more traditional definitions of discretionary access control\nrequire identity-based access control, that limitation is not required for this\nuse of discretionary access control.","rationale":"","check":"Review the system documentation to obtain the definition of the\ndatabase/DBMS functionality considered privileged in the context of the system\nin question.\n\n    If any functionality considered privileged has access privileges granted to\nnon-privileged users, this is a finding.","fix":"Revoke any roles with unnecessary privileges to privileged functionality by\nexecuting the revoke command as documented here:\n    https://docs.mongodb.com/v3.4/reference/method/db.revokeRolesFromUser/\n\n    Revoke any unnecessary privileges from any roles by executing the revoke\ncommand as document here:\n    https://docs.mongodb.com/v3.4/reference/method/db.revokePrivilegesFromRole/\n\n    If a new role with associated privileges needs to be created, follow the\ndocumentation here:\n    https://docs.mongodb.com/v3.4/reference/command/createRole/"},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000328-DB-000301","satisfies":["SRG-APP-000328-DB-000301","SRG-APP-000340-DB-000304"],"gid":"V-81899","rid":"SV-96613r1_rule","stig_id":"MD3X-00-000570","fix_id":"F-88749r1_fix","cci":["CCI-002165","CCI-002235"],"nist":["AC-3 (4)","AC-6 (10)"]},"code":"control 'V-81899' do\n  title \"MongoDB must enforce discretionary access control policies, as defined\nby the data owner, over defined subjects and objects.\"\n  desc  \"Discretionary Access Control (DAC) is based on the notion that\nindividual users are \\\"owners\\\" of objects and therefore have discretion over\nwho should be authorized to access the object and in which mode (e.g., read or\nwrite). Ownership is usually acquired as a consequence of creating the object\nor via specified ownership assignment. DAC allows the owner to determine who\nwill have access to objects they control. An example of DAC includes\nuser-controlled table permissions.\n\n    When discretionary access control policies are implemented, subjects are\nnot constrained with regard to what actions they can take with information for\nwhich they have already been granted access. Thus, subjects that have been\ngranted access to information are not prevented from passing (i.e., the\nsubjects have the discretion to pass) the information to other subjects or\nobjects.\n\n    A subject that is constrained in its operation by Mandatory Access Control\npolicies is still able to operate under the less rigorous constraints of this\nrequirement. Thus, while Mandatory Access Control imposes constraints\npreventing a subject from passing information to another subject operating at a\ndifferent sensitivity level, this requirement permits the subject to pass the\ninformation to any subject at the same sensitivity level.\n\n    The policy is bounded by the information system boundary. Once the\ninformation is passed outside of the control of the information system,\nadditional means may be required to ensure the constraints remain in effect.\nWhile the older, more traditional definitions of discretionary access control\nrequire identity-based access control, that limitation is not required for this\nuse of discretionary access control.\n\n\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the system documentation to obtain the definition of the\ndatabase/DBMS functionality considered privileged in the context of the system\nin question.\n\n    If any functionality considered privileged has access privileges granted to\nnon-privileged users, this is a finding.\n  \"\n  desc 'fix', \"\n    Revoke any roles with unnecessary privileges to privileged functionality by\nexecuting the revoke command as documented here:\n    https://docs.mongodb.com/v3.4/reference/method/db.revokeRolesFromUser/\n\n    Revoke any unnecessary privileges from any roles by executing the revoke\ncommand as document here:\n    https://docs.mongodb.com/v3.4/reference/method/db.revokePrivilegesFromRole/\n\n    If a new role with associated privileges needs to be created, follow the\ndocumentation here:\n    https://docs.mongodb.com/v3.4/reference/command/createRole/\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000328-DB-000301'\n  tag satisfies: %w(SRG-APP-000328-DB-000301 SRG-APP-000340-DB-000304)\n  tag gid: 'V-81899'\n  tag rid: 'SV-96613r1_rule'\n  tag stig_id: 'MD3X-00-000570'\n  tag fix_id: 'F-88749r1_fix'\n  tag cci: %w(CCI-002165 CCI-002235)\n  tag nist: ['AC-3 (4)', 'AC-6 (10)']\n\n  a = []\n  dbnames = []\n  mongo_user = attribute('user')\n  mongo_password = attribute('password')\n\n  get_databases = command(\"mongo -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'JSON.stringify(db.adminCommand( { listDatabases: 1, nameOnly: true}))'\").stdout.strip.split('\"name\":\"')\n\n  get_databases.each do |db|\n    if db.include? 'databases'\n      a.push(db)\n      get_databases.delete(db)\n    end\n  end\n\n  get_databases.each do |db|\n    loc_colon = db.index('\"')\n    names = db[0, loc_colon]\n    dbnames.push(names)\n  end\n\n  if dbnames.empty?\n    describe 'There are no mongo databases, therefore for this control is NA' do\n      skip 'There are no mongo databases, therefore for this control is NA'\n    end\n  end\n\n  unless dbnames.empty?\n    dbnames.each do |dbs|\n      users = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\"}, {user: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n      users.each do |t|\n        loc_colon = t.index(':')\n        user = t[loc_colon + 3..-1]\n        loc_quote = user.index('\"')\n        username = user[0, loc_quote]\n        getdb_roles = command(\"mongo admin -u '#{mongo_user}' -p '#{mongo_password}' --quiet --eval 'db.system.users.find({db: \\\"#{dbs}\\\", user: \\\"#{username}\\\"}, {roles: 1, _id: false, distinct: 1})'\").stdout.strip.split(\"\\n\")\n        getdb_roles.each do |r|\n          remove_role = r.index('[')\n          rr = r[remove_role..-1]\n          allowed_role = username\n          describe \"The database role for user: #{username}\" do\n            subject { rr }\n            it { should be_in attribute(\"#{allowed_role}_allowed_role\") }\n          end\n        end\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81899.rb","line":1},"id":"V-81899"},{"title":"Unused database components, DBMS software, and database objects must\nbe removed.","desc":"Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    DBMSs must adhere to the principles of least functionality by providing\nonly essential capabilities.","descriptions":{"default":"Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    DBMSs must adhere to the principles of least functionality by providing\nonly essential capabilities.","rationale":"","check":"Review the list of components and features installed with the MongoDB\ndatabase.\n\n    If unused components are installed and are not documented and authorized,\nthis is a finding.\n\n    RPM can also be used to check to see what is installed:\n\n    yum list installed | grep mongodb\n\n    This returns MongoDB database packages that have been installed.\n\n    If any packages displayed by this command are not being used, this is a\nfinding.","fix":"On data-bearing nodes and arbiter nodes, the mongodb-enterprise-tools,\nmongodb-enterprise-shell and mongodb-enterprise-mongos can be removed (or not\ninstalled).\n\n    On applications servers that typically run the mongos process when\nconnecting to a shared cluster, the only package required is the\nmongodb-enterprise-mongos package."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000141-DB-000091","gid":"V-81859","rid":"SV-96573r1_rule","stig_id":"MD3X-00-000280","fix_id":"F-88709r1_fix","cci":["CCI-000381"],"nist":["CM-7 a"]},"code":"control 'V-81859' do\n  title \"Unused database components, DBMS software, and database objects must\nbe removed.\"\n  desc  \"Information systems are capable of providing a wide variety of\nfunctions and services. Some of the functions and services, provided by\ndefault, may not be necessary to support essential organizational operations\n(e.g., key missions, functions).\n\n    It is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\n    DBMSs must adhere to the principles of least functionality by providing\nonly essential capabilities.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the list of components and features installed with the MongoDB\ndatabase.\n\n    If unused components are installed and are not documented and authorized,\nthis is a finding.\n\n    RPM can also be used to check to see what is installed:\n\n    yum list installed | grep mongodb\n\n    This returns MongoDB database packages that have been installed.\n\n    If any packages displayed by this command are not being used, this is a\nfinding.\n  \"\n  desc 'fix', \"\n    On data-bearing nodes and arbiter nodes, the mongodb-enterprise-tools,\nmongodb-enterprise-shell and mongodb-enterprise-mongos can be removed (or not\ninstalled).\n\n    On applications servers that typically run the mongos process when\nconnecting to a shared cluster, the only package required is the\nmongodb-enterprise-mongos package.\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000141-DB-000091'\n  tag gid: 'V-81859'\n  tag rid: 'SV-96573r1_rule'\n  tag stig_id: 'MD3X-00-000280'\n  tag fix_id: 'F-88709r1_fix'\n  tag cci: ['CCI-000381']\n  tag nist: ['CM-7 a']\n\n  mongodb_installed_packages = command('rpm -qa | grep mongodb').stdout.strip.split(\"\\n\")\n\n  if mongodb_installed_packages.empty?\n    describe 'There are no mongo database packages installed, therefore for this control is NA' do\n      skip 'There are no mongo database packages installed, therefore for this control is NA'\n    end\n  end\n\n  unless mongodb_installed_packages.empty?\n    mongodb_installed_packages.each do |package|\n      describe \"The installed mongodb package: #{package}\" do\n        subject { package }\n        it { should be_in attribute('mongodb_packages_used') }\n      end\n    end\n  end\nend\n","source_location":{"ref":"controls/V-81859.rb","line":1},"id":"V-81859"},{"title":"MongoDB must maintain the confidentiality and integrity of information\nduring preparation for transmission.","desc":"Information can be either unintentionally or maliciously disclosed or\nmodified during preparation for transmission, including, for example, during\naggregation, at protocol transformation points, and during packing/unpacking.\nThese unauthorized disclosures or modifications compromise the confidentiality\nor integrity of the information.\n\n    Use of this requirement will be limited to situations where the data owner\nhas a strict requirement for ensuring data integrity and confidentiality is\nmaintained at every step of the data transfer and handling process.\n\n    When transmitting data, MongoDB, associated applications, and\ninfrastructure must leverage transmission protection mechanisms.","descriptions":{"default":"Information can be either unintentionally or maliciously disclosed or\nmodified during preparation for transmission, including, for example, during\naggregation, at protocol transformation points, and during packing/unpacking.\nThese unauthorized disclosures or modifications compromise the confidentiality\nor integrity of the information.\n\n    Use of this requirement will be limited to situations where the data owner\nhas a strict requirement for ensuring data integrity and confidentiality is\nmaintained at every step of the data transfer and handling process.\n\n    When transmitting data, MongoDB, associated applications, and\ninfrastructure must leverage transmission protection mechanisms.","rationale":"","check":"Review the system information/specification for information indicating a\nstrict requirement for data integrity and confidentiality when data is being\nprepared to be transmitted.\n\n    If such information is absent therein, this is not a finding.\n\n    If such information is present, inspect the MongoDB configuration file\n(default location: /etc/mongod.conf) for the following entries:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    If net.ssl.mode is not set to \"requireSSL\", this is a finding.","fix":"Stop the MongoDB instance if it is running. Obtain a certificate from a\nvalid DoD certificate authority to be used for encrypted data transmission.\nModify the MongoDB configuration file with ssl configuration options such as:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    Set \"net.ssl.mode\" to the \"requireSSL\".\n    Set \"net.ssl.KeyFile\" to the full path of the certificate (.pem) file.\n\n    Start/stop (restart) all mongod or mongos instances using the MongoDB\nconfiguration file (default location: /etc/mongod.conf)."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000441-DB-000378","gid":"V-81921","rid":"SV-96635r1_rule","stig_id":"MD3X-00-000760","fix_id":"F-88771r1_fix","cci":["CCI-002420"],"nist":["SC-8 (2)"],"sdlc_stages":["scm"]},"code":"control 'V-81921' do\n  title \"MongoDB must maintain the confidentiality and integrity of information\nduring preparation for transmission.\"\n  desc  \"Information can be either unintentionally or maliciously disclosed or\nmodified during preparation for transmission, including, for example, during\naggregation, at protocol transformation points, and during packing/unpacking.\nThese unauthorized disclosures or modifications compromise the confidentiality\nor integrity of the information.\n\n    Use of this requirement will be limited to situations where the data owner\nhas a strict requirement for ensuring data integrity and confidentiality is\nmaintained at every step of the data transfer and handling process.\n\n    When transmitting data, MongoDB, associated applications, and\ninfrastructure must leverage transmission protection mechanisms.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the system information/specification for information indicating a\nstrict requirement for data integrity and confidentiality when data is being\nprepared to be transmitted.\n\n    If such information is absent therein, this is not a finding.\n\n    If such information is present, inspect the MongoDB configuration file\n(default location: /etc/mongod.conf) for the following entries:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    If net.ssl.mode is not set to \\\"requireSSL\\\", this is a finding.\n  \"\n  desc 'fix', \"\n    Stop the MongoDB instance if it is running. Obtain a certificate from a\nvalid DoD certificate authority to be used for encrypted data transmission.\nModify the MongoDB configuration file with ssl configuration options such as:\n\n    net:\n    ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb.pem\n\n    Set \\\"net.ssl.mode\\\" to the \\\"requireSSL\\\".\n    Set \\\"net.ssl.KeyFile\\\" to the full path of the certificate (.pem) file.\n\n    Start/stop (restart) all mongod or mongos instances using the MongoDB\nconfiguration file (default location: /etc/mongod.conf).\n  \"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000441-DB-000378'\n  tag gid: 'V-81921'\n  tag rid: 'SV-96635r1_rule'\n  tag stig_id: 'MD3X-00-000760'\n  tag fix_id: 'F-88771r1_fix'\n  tag cci: ['CCI-002420']\n  tag nist: ['SC-8 (2)']\n  tag sdlc_stages: ['scm']\n\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl mode)) { should cmp 'requireSSL' }\n  end\n  describe yaml(attribute('mongod_conf')) do\n    its(%w(net ssl PEMKeyFile)) { should cmp '/etc/ssl/mongodb.pem' }\n  end\nend\n","source_location":{"ref":"controls/V-81921.rb","line":1},"id":"V-81921"},{"title":"MongoDB must be configured in accordance with the security\nconfiguration settings based on DoD security configuration and implementation\nguidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.","desc":"Configuring MongoDB to implement organization-wide security\nimplementation guides and security checklists ensures compliance with federal\nstandards and establishes a common security baseline across DoD that reflects\nthe most restrictive security posture consistent with operational requirements.\n\n    In addition to this SRG, sources of guidance on security and information\nassurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs.\nMongoDB must be configured in compliance with guidance from all such relevant\nsources.","descriptions":{"default":"Configuring MongoDB to implement organization-wide security\nimplementation guides and security checklists ensures compliance with federal\nstandards and establishes a common security baseline across DoD that reflects\nthe most restrictive security posture consistent with operational requirements.\n\n    In addition to this SRG, sources of guidance on security and information\nassurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs.\nMongoDB must be configured in compliance with guidance from all such relevant\nsources.","rationale":"","check":"Review the MongoDB documentation and configuration to determine it is\nconfigured in accordance with DoD security configuration and implementation\nguidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.\n\n    If the MongoDB is not configured in accordance with security configuration\nsettings, this is a finding.","fix":"Configure MongoDB in accordance with security configuration\nsettings by reviewing the Operation System and MongoDB documentation and\napplying the necessary configuration parameters to meet the configurations\nrequired by the STIG, NSA configuration guidelines, CTOs, DTMs, and IAVMs."},"impact":0.5,"refs":[],"tags":{"severity":"medium","gtitle":"SRG-APP-000516-DB-000363","gid":"V-81929","rid":"SV-96643r1_rule","stig_id":"MD3X-00-001100","fix_id":"F-88779r1_fix","cci":["CCI-000366"],"nist":["CM-6 b"]},"code":"control 'V-81929' do\n  title \"MongoDB must be configured in accordance with the security\nconfiguration settings based on DoD security configuration and implementation\nguidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.\"\n  desc  \"Configuring MongoDB to implement organization-wide security\nimplementation guides and security checklists ensures compliance with federal\nstandards and establishes a common security baseline across DoD that reflects\nthe most restrictive security posture consistent with operational requirements.\n\n    In addition to this SRG, sources of guidance on security and information\nassurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs.\nMongoDB must be configured in compliance with guidance from all such relevant\nsources.\n  \"\n  desc  'rationale', ''\n  desc  'check', \"\n    Review the MongoDB documentation and configuration to determine it is\nconfigured in accordance with DoD security configuration and implementation\nguidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.\n\n    If the MongoDB is not configured in accordance with security configuration\nsettings, this is a finding.\n  \"\n  desc 'fix', \"Configure MongoDB in accordance with security configuration\nsettings by reviewing the Operation System and MongoDB documentation and\napplying the necessary configuration parameters to meet the configurations\nrequired by the STIG, NSA configuration guidelines, CTOs, DTMs, and IAVMs.\"\n  impact 0.5\n  tag severity: 'medium'\n  tag gtitle: 'SRG-APP-000516-DB-000363'\n  tag gid: 'V-81929'\n  tag rid: 'SV-96643r1_rule'\n  tag stig_id: 'MD3X-00-001100'\n  tag fix_id: 'F-88779r1_fix'\n  tag cci: ['CCI-000366']\n  tag nist: ['CM-6 b']\n\n  describe 'A manual review is required to ensure that MongoDB is configured in accordance with the security\n  configuration settings based on DoD security configuration and implementation\n  guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.' do\n    skip 'A manual review is required to ensure that MongoDB is configured in accordance with the security\n    configuration settings based on DoD security configuration and implementation\n    guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.'\n  end\nend\n","source_location":{"ref":"controls/V-81929.rb","line":1},"id":"V-81929"}],"groups":[{"title":null,"controls":["V-81851"],"id":"V-81851.rb"},{"title":null,"controls":["V-81857"],"id":"V-81857.rb"},{"title":null,"controls":["V-81861"],"id":"V-81861.rb"},{"title":null,"controls":["V-81885"],"id":"V-81885.rb"},{"title":null,"controls":["V-81897"],"id":"V-81897.rb"},{"title":null,"controls":["V-81847"],"id":"V-81847.rb"},{"title":null,"controls":["V-81849"],"id":"V-81849.rb"},{"title":null,"controls":["V-81879"],"id":"V-81879.rb"},{"title":null,"controls":["V-81925"],"id":"V-81925.rb"},{"title":null,"controls":["V-81845"],"id":"V-81845.rb"},{"title":null,"controls":["V-81917"],"id":"V-81917.rb"},{"title":null,"controls":["V-81877"],"id":"V-81877.rb"},{"title":null,"controls":["V-81901"],"id":"V-81901.rb"},{"title":null,"controls":["V-81881"],"id":"V-81881.rb"},{"title":null,"controls":["V-81891"],"id":"V-81891.rb"},{"title":null,"controls":["V-81907"],"id":"V-81907.rb"},{"title":null,"controls":["V-81889"],"id":"V-81889.rb"},{"title":null,"controls":["V-81911"],"id":"V-81911.rb"},{"title":null,"controls":["V-81867"],"id":"V-81867.rb"},{"title":null,"controls":["V-81855"],"id":"V-81855.rb"},{"title":null,"controls":["V-81915"],"id":"V-81915.rb"},{"title":null,"controls":["V-81909"],"id":"V-81909.rb"},{"title":null,"controls":["V-81919"],"id":"V-81919.rb"},{"title":null,"controls":["V-81905"],"id":"V-81905.rb"},{"title":null,"controls":["V-81853"],"id":"V-81853.rb"},{"title":null,"controls":["V-81863"],"id":"V-81863.rb"},{"title":null,"controls":["V-81875"],"id":"V-81875.rb"},{"title":null,"controls":["V-81903"],"id":"V-81903.rb"},{"title":null,"controls":["V-81871"],"id":"V-81871.rb"},{"title":null,"controls":["V-81893"],"id":"V-81893.rb"},{"title":null,"controls":["V-81923"],"id":"V-81923.rb"},{"title":null,"controls":["V-81873"],"id":"V-81873.rb"},{"title":null,"controls":["V-81927"],"id":"V-81927.rb"},{"title":null,"controls":["V-81887"],"id":"V-81887.rb"},{"title":null,"controls":["V-81913"],"id":"V-81913.rb"},{"title":null,"controls":["V-81883"],"id":"V-81883.rb"},{"title":null,"controls":["V-81869"],"id":"V-81869.rb"},{"title":null,"controls":["V-81895"],"id":"V-81895.rb"},{"title":null,"controls":["V-81843"],"id":"V-81843.rb"},{"title":null,"controls":["V-81865"],"id":"V-81865.rb"},{"title":null,"controls":["V-81899"],"id":"V-81899.rb"},{"title":null,"controls":["V-81859"],"id":"V-81859.rb"},{"title":null,"controls":["V-81921"],"id":"V-81921.rb"},{"title":null,"controls":["V-81929"],"id":"V-81929.rb"}],"inputs":[],"sha256":"b34830b257dd881f17d1d3c09a4ef01deccfc69d610ac4327fca7e75785e13e4","status_message":"","status":"loaded","generator":{"name":"inspec","version":"4.28.0"}}
